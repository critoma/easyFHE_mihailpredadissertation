"use strict";(globalThis["webpackChunkfhe_module_quasar_demo"]=globalThis["webpackChunkfhe_module_quasar_demo"]||[]).push([[622],{3622:(e,t,a)=>{a.r(t),a.d(t,{default:()=>It});var r=a(9835);function s(e,t,a,s,l,o){const i=(0,r.up)("q-btn"),n=(0,r.up)("q-page-sticky"),c=(0,r.up)("AddScheme"),u=(0,r.up)("SchemeBuilder"),p=(0,r.up)("q-page");return(0,r.wg)(),(0,r.j4)(p,{class:"fit column wrap justify-center items-center"},{default:(0,r.w5)((()=>[(0,r.Wm)(n,{position:"top-right",offset:[15,15],style:{zIndex:1}},{default:(0,r.w5)((()=>[(0,r.Wm)(i,{class:"q-pa-sm",round:"",color:"primary",icon:"add",onClick:e.openAddDialog},null,8,["onClick"])])),_:1}),e.openDialog?((0,r.wg)(),(0,r.j4)(c,{key:0,class:"new-operation"})):(0,r.kq)("",!0),((0,r.wg)(!0),(0,r.iD)(r.HY,null,(0,r.Ko)(e.homomorphicSchemes,((t,a)=>((0,r.wg)(),(0,r.j4)(u,{key:a,scheme:t,onAddOperation:a=>e.addOperationToScheme(t,a),onRemoveScheme:a=>e.removeSchemeFromPlayground(t)},null,8,["scheme","onAddOperation","onRemoveScheme"])))),128))])),_:1})}var l=a(8466),o=a(2502),i=a(6970);const n=(0,r._)("div",{class:"text-h6"},"Adding a new homomorphic computation",-1);function c(e,t,a,s,l,o){const c=(0,r.up)("q-card-section"),u=(0,r.up)("q-separator"),p=(0,r.up)("q-icon"),d=(0,r.up)("q-item-section"),h=(0,r.up)("q-item-label"),y=(0,r.up)("q-item"),$=(0,r.up)("q-select"),m=(0,r.up)("q-btn"),f=(0,r.up)("q-card-actions"),g=(0,r.up)("q-form"),v=(0,r.up)("q-card"),V=(0,r.up)("q-dialog");return(0,r.wg)(),(0,r.j4)(V,{modelValue:e.openDialog,"onUpdate:modelValue":t[4]||(t[4]=t=>e.openDialog=t),"transition-show":"rotate","transition-hide":"rotate"},{default:(0,r.w5)((()=>[(0,r.Wm)(v,null,{default:(0,r.w5)((()=>[(0,r.Wm)(g,{onSubmit:e.add},{default:(0,r.w5)((()=>[(0,r.Wm)(c,null,{default:(0,r.w5)((()=>[n])),_:1}),(0,r.Wm)(u),(0,r.Wm)(c,{style:{"max-height":"50vh"},class:"scroll"},{default:(0,r.w5)((()=>[(0,r.Wm)($,{filled:"",modelValue:e.newScheme.scheme,"onUpdate:modelValue":t[0]||(t[0]=t=>e.newScheme.scheme=t),"map-options":"","option-value":"value",options:e.schemes,label:"Encryption scheme",class:"q-pa-sm","options-selected-class":"text-deep-blue"},{option:(0,r.w5)((e=>[(0,r.Wm)(y,(0,i.vs)((0,r.F4)(e.itemProps)),{default:(0,r.w5)((()=>[(0,r.Wm)(d,{avatar:""},{default:(0,r.w5)((()=>[(0,r.Wm)(p,{name:e.opt.icon},null,8,["name"])])),_:2},1024),(0,r.Wm)(d,null,{default:(0,r.w5)((()=>[(0,r.Wm)(h,null,{default:(0,r.w5)((()=>[(0,r.Uk)((0,i.zw)(e.opt.label),1)])),_:2},1024),(0,r.Wm)(h,{caption:""},{default:(0,r.w5)((()=>[(0,r.Uk)((0,i.zw)(e.opt.fullName),1)])),_:2},1024),(0,r.Wm)(h,{caption:""},{default:(0,r.w5)((()=>[(0,r.Uk)((0,i.zw)(e.opt.description),1)])),_:2},1024)])),_:2},1024)])),_:2},1040)])),_:1},8,["modelValue","options"]),(0,r.Wm)($,{filled:"",modelValue:e.newScheme.security,"onUpdate:modelValue":t[1]||(t[1]=t=>e.newScheme.security=t),"map-options":"","option-value":"value",options:e.securities,label:"Security",class:"q-pa-sm","options-selected-class":"text-deep-blue"},{option:(0,r.w5)((e=>[(0,r.Wm)(y,(0,i.vs)((0,r.F4)(e.itemProps)),{default:(0,r.w5)((()=>[(0,r.Wm)(d,{avatar:""},{default:(0,r.w5)((()=>[(0,r.Wm)(p,{name:e.opt.icon},null,8,["name"])])),_:2},1024),(0,r.Wm)(d,null,{default:(0,r.w5)((()=>[(0,r.Wm)(h,null,{default:(0,r.w5)((()=>[(0,r.Uk)((0,i.zw)(e.opt.label),1)])),_:2},1024),(0,r.Wm)(h,{caption:""},{default:(0,r.w5)((()=>[(0,r.Uk)((0,i.zw)(e.opt.fullName),1)])),_:2},1024),(0,r.Wm)(h,{caption:""},{default:(0,r.w5)((()=>[(0,r.Uk)((0,i.zw)(e.opt.description),1)])),_:2},1024)])),_:2},1024)])),_:2},1040)])),_:1},8,["modelValue","options"]),(0,r.Wm)($,{filled:"",modelValue:e.newScheme.speed,"onUpdate:modelValue":t[2]||(t[2]=t=>e.newScheme.speed=t),"map-options":"","option-value":"value",options:e.speeds,label:"Processing speed",class:"q-pa-sm","options-selected-class":"text-deep-blue"},{option:(0,r.w5)((e=>[(0,r.Wm)(y,(0,i.vs)((0,r.F4)(e.itemProps)),{default:(0,r.w5)((()=>[(0,r.Wm)(d,{avatar:""},{default:(0,r.w5)((()=>[(0,r.Wm)(p,{name:e.opt.icon},null,8,["name"])])),_:2},1024),(0,r.Wm)(d,null,{default:(0,r.w5)((()=>[(0,r.Wm)(h,null,{default:(0,r.w5)((()=>[(0,r.Uk)((0,i.zw)(e.opt.label),1)])),_:2},1024),(0,r.Wm)(h,{caption:""},{default:(0,r.w5)((()=>[(0,r.Uk)((0,i.zw)(e.opt.fullName),1)])),_:2},1024),(0,r.Wm)(h,{caption:""},{default:(0,r.w5)((()=>[(0,r.Uk)((0,i.zw)(e.opt.description),1)])),_:2},1024)])),_:2},1024)])),_:2},1040)])),_:1},8,["modelValue","options"]),e.newScheme.scheme.value==e.EasyScheme.CKKS?((0,r.wg)(),(0,r.j4)($,{key:0,filled:"",modelValue:e.newScheme.precision,"onUpdate:modelValue":t[3]||(t[3]=t=>e.newScheme.precision=t),"map-options":"","option-value":"value",options:e.precisions,label:"Precision",class:"q-pa-sm","options-selected-class":"text-deep-blue"},{option:(0,r.w5)((e=>[(0,r.Wm)(y,(0,i.vs)((0,r.F4)(e.itemProps)),{default:(0,r.w5)((()=>[(0,r.Wm)(d,{avatar:""},{default:(0,r.w5)((()=>[(0,r.Wm)(p,{name:e.opt.icon},null,8,["name"])])),_:2},1024),(0,r.Wm)(d,null,{default:(0,r.w5)((()=>[(0,r.Wm)(h,null,{default:(0,r.w5)((()=>[(0,r.Uk)((0,i.zw)(e.opt.label),1)])),_:2},1024),(0,r.Wm)(h,{caption:""},{default:(0,r.w5)((()=>[(0,r.Uk)((0,i.zw)(e.opt.fullName),1)])),_:2},1024),(0,r.Wm)(h,{caption:""},{default:(0,r.w5)((()=>[(0,r.Uk)((0,i.zw)(e.opt.description),1)])),_:2},1024)])),_:2},1024)])),_:2},1040)])),_:1},8,["modelValue","options"])):(0,r.kq)("",!0)])),_:1}),(0,r.Wm)(u),(0,r.Wm)(f,{align:"right"},{default:(0,r.w5)((()=>[(0,r.Wm)(m,{flat:"",label:"Decline",color:"primary",onClick:e.close},null,8,["onClick"]),(0,r.Wm)(m,{flat:"",label:"Accept",color:"primary",type:"submit"})])),_:1})])),_:1},8,["onSubmit"])])),_:1})])),_:1},8,["modelValue"])}var u=a(499),p=a(2791);const d=(0,r.aZ)({name:"AddScheme",components:{},setup(){const e=(0,l.C)(),{homomorphicSchemes:t,openDialog:a,schemeID:r}=(0,o.Jk)(e),s=[{label:"BFV",value:p.Px.BFV,fullName:"Brakerski-Fan-Vercauteren encryption scheme",description:"Used for integer operations",icon:"mdi-script-text"},{label:"BGV",value:p.Px.BGV,fullName:"Brakerski-Gentry-Vercauteren encryption scheme",description:"Used for integer operations",icon:"mdi-script-text"},{label:"CKKS",value:p.Px.CKKS,fullName:"Cheon-Kim-Kim-Song encryption scheme",description:"Used for floating-point (real) operations",icon:"mdi-script-text"}],i=[{label:"128 bits",value:p.qg.TC128,fullName:"Minimum level of security according",description:"to NIST standards",icon:"mdi-shield-lock"},{label:"192 bits",value:p.qg.TC192,fullName:"Minimum level of security according",description:"to NIST standards",icon:"mdi-shield-lock"},{label:"256 bits",value:p.qg.TC256,fullName:"Minimum level of security according",description:"to NIST standards",icon:"mdi-shield-lock"}],n=[{label:"Fast",value:p.Nk.FAST,fullName:"The scheme parameters will have smaller values,",description:"increasing the speed of computations",icon:"mdi-circle-slice-2"},{label:"Normal",value:p.Nk.NORMAL,fullName:"The scheme parameters will have normal values,",description:"keeping constant the speed of computations",icon:"mdi-circle-slice-3"},{label:"Slow",value:p.Nk.SLOW,fullName:"The scheme parameters will have bigger",description:"values, impacting the speed of computations",icon:"mdi-circle-slice-4"},{label:"Very slow",value:p.Nk.VERY_SLOW,fullName:"The scheme parameters will have the biggest",description:"values, impacting severely the speed of computations",icon:"mdi-circle-slice-5"}],c=[{label:"Low",value:p.Hr.LOW,fullName:"The bites reserved for preserving accuracy of computations",description:"2^10 bits or 1024 bits",icon:"mdi-chevron-up"},{label:"Normal",value:p.Hr.NORMAL,fullName:"The bites reserved for preserving accuracy of computations",description:"2^20 bits or 1048576 bits",icon:"mdi-chevron-double-up"},{label:"High",value:p.Hr.HIGH,fullName:"The bites reserved for preserving accuracy of computations",description:"2^30 bits or 1073741824 bits",icon:"mdi-chevron-triple-up"}],d=(0,u.iH)({schemeID:r.value,scheme:s[0],security:i[0],speed:n[0],precision:c[0],operations:[]});return e.schemeID+=1,{schemes:s,securities:i,speeds:n,precisions:c,newScheme:d,EasyScheme:p.Px,homomorphicSchemes:t,openDialog:a}},methods:{close(){this.openDialog=!1},add(){this.homomorphicSchemes.push(this.newScheme),this.openDialog=!1}}});var h=a(1639),y=a(2074),$=a(4458),m=a(8326),f=a(3190),g=a(926),v=a(5576),V=a(490),x=a(1233),S=a(2857),P=a(3115),b=a(1821),R=a(4455),E=a(9984),C=a.n(E);const L=(0,h.Z)(d,[["render",c]]),F=L;C()(d,"components",{QDialog:y.Z,QCard:$.Z,QForm:m.Z,QCardSection:f.Z,QSeparator:g.Z,QSelect:v.Z,QItem:V.Z,QItemSection:x.Z,QIcon:S.Z,QItemLabel:P.Z,QCardActions:b.Z,QBtn:R.Z});const w=e=>((0,r.dD)("data-v-19018b02"),e=e(),(0,r.Cn)(),e),H={class:"flex"},I={class:"text-h6"},K={class:"text-subtitle2"},A={class:"text-subtitle1 row"},O=w((()=>(0,r._)("strong",null," Parameters",-1))),G={class:"text-subtitle2 elements"},N=(0,r.Uk)("Add Operation"),T=(0,r.Uk)("Compare Code"),k=(0,r.Uk)("Delete Scheme");function W(e,t,a,s,l,o){const n=(0,r.up)("q-icon"),c=(0,r.up)("q-item-section"),u=(0,r.up)("q-item"),p=(0,r.up)("q-list"),d=(0,r.up)("q-card-section"),h=(0,r.up)("OperationBuilder"),y=(0,r.up)("q-separator"),$=(0,r.up)("q-btn"),m=(0,r.up)("q-card-actions"),f=(0,r.up)("q-spinner-gears"),g=(0,r.up)("q-inner-loading"),v=(0,r.up)("q-card"),V=(0,r.up)("CodeComparison");return(0,r.wg)(),(0,r.iD)("div",H,[(0,r.Wm)(v,{class:"my-card bg-grey-9 text-white q-ma-sm"},{default:(0,r.w5)((()=>[(0,r.Wm)(d,null,{default:(0,r.w5)((()=>{var t;return[(0,r._)("div",I,(0,i.zw)(e.scheme.scheme.fullName),1),(0,r._)("div",K,(0,i.zw)(null===(t=e.scheme)||void 0===t?void 0:t.scheme.description),1),(0,r._)("div",A,[O,(0,r._)("div",G,[(0,r.Wm)(p,{dense:"",class:"list-parameters"},{default:(0,r.w5)((()=>[(0,r.Wm)(u,null,{default:(0,r.w5)((()=>[(0,r.Wm)(c,{class:"icon-avatar",avatar:""},{default:(0,r.w5)((()=>[(0,r.Wm)(n,{color:"white",name:"mdi-shield-lock"})])),_:1}),(0,r.Wm)(c,null,{default:(0,r.w5)((()=>[(0,r.Uk)("Security: "+(0,i.zw)(e.scheme.security.label),1)])),_:1})])),_:1}),(0,r.Wm)(u,null,{default:(0,r.w5)((()=>[(0,r.Wm)(c,{class:"icon-avatar",avatar:""},{default:(0,r.w5)((()=>[(0,r.Wm)(n,{color:"white",name:"mdi-circle-slice-5"})])),_:1}),(0,r.Wm)(c,null,{default:(0,r.w5)((()=>[(0,r.Uk)("Processing speed: "+(0,i.zw)(e.scheme.speed.label),1)])),_:1})])),_:1}),e.scheme.scheme.value===e.EasyScheme.CKKS?((0,r.wg)(),(0,r.j4)(u,{key:0},{default:(0,r.w5)((()=>[(0,r.Wm)(c,{class:"icon-avatar",avatar:""},{default:(0,r.w5)((()=>[(0,r.Wm)(n,{color:"white",name:"mdi-chevron-double-up"})])),_:1}),(0,r.Wm)(c,null,{default:(0,r.w5)((()=>[(0,r.Uk)("Precision: "+(0,i.zw)(e.scheme.precision.label),1)])),_:1})])),_:1})):(0,r.kq)("",!0)])),_:1})])])]})),_:1}),(0,r.Wm)(d,{class:"scroll",style:{height:"580px",width:"900px",minWidth:"900px",maxHeight:"330px"}},{default:(0,r.w5)((()=>[((0,r.wg)(!0),(0,r.iD)(r.HY,null,(0,r.Ko)(e.scheme.operations,((a,s)=>((0,r.wg)(),(0,r.j4)(h,{key:s,scheme:e.scheme,easyFHE:e.easyFHE,publicKey:e.publicKey,secretKey:e.secretKey,onUpdateOperation:t[0]||(t[0]=t=>e.updateOperationFromCurrentScheme(e.scheme,t))},null,8,["scheme","easyFHE","publicKey","secretKey"])))),128))])),_:1}),(0,r.Wm)(y,{dark:""}),(0,r.Wm)(m,null,{default:(0,r.w5)((()=>[(0,r.Wm)($,{flat:"",onClick:e.addOperation,icon:"add"},{default:(0,r.w5)((()=>[N])),_:1},8,["onClick"]),(0,r.Wm)($,{flat:"",icon:"mdi-file-compare",disable:!e.isDisabledCompareCode,onClick:e.compareCode},{default:(0,r.w5)((()=>[T])),_:1},8,["disable","onClick"]),(0,r.Wm)($,{flat:"",icon:"mdi-delete",onClick:e.removeScheme},{default:(0,r.w5)((()=>[k])),_:1},8,["onClick"])])),_:1}),(0,r.Wm)(g,{showing:e.loadingModule,"label-style":{fontSize:"1.5rem",color:"black"}},{default:(0,r.w5)((()=>[(0,r.Wm)(f,{size:"50px",color:"black"}),(0,r._)("span",{style:(0,i.j5)({fontSize:"1.5rem",color:"black"})}," Initializing module.... ",4)])),_:1},8,["showing","label-style"])])),_:1}),(0,r.Wm)(V,{scheme:e.scheme},null,8,["scheme"])])}var z=a(1957);const _=e=>((0,r.dD)("data-v-3572af60"),e=e(),(0,r.Cn)(),e),D={class:"operation-container"},M={class:"grid-operations"},q={class:"grid-operation plain-group"},B={class:"cipher-plaintext-toggle"},Z=(0,r.Uk)(" Plaintext "),j=_((()=>(0,r._)("div",{class:"empty"},null,-1))),Q={class:"cipher-plaintext-toggle"},U=(0,r.Uk)(" Plaintext "),Y=_((()=>(0,r._)("div",{class:"empty"},null,-1))),X=_((()=>(0,r._)("div",{class:"empty"},null,-1))),J={key:0,class:"outer"},ee={key:0,class:"outer"},te={key:0,class:"outer"},ae={class:"grid-operation encrypted-group inner"},re={class:"operation-buttons"},se=(0,r.Uk)("Compute"),le=(0,r.Uk)("Decrypt");function oe(e,t,a,s,l,o){const n=(0,r.up)("q-toggle"),c=(0,r.up)("q-input"),u=(0,r.up)("q-select"),p=(0,r.up)("q-btn"),d=(0,r.up)("q-form"),h=(0,r.up)("q-spinner-gears"),y=(0,r.up)("q-inner-loading"),$=(0,r.up)("q-card-section"),m=(0,r.up)("q-card");return(0,r.wg)(),(0,r.j4)(m,{class:"bg-grey-8 q-mb-sm"},{default:(0,r.w5)((()=>[(0,r.Wm)($,null,{default:(0,r.w5)((()=>[(0,r.Wm)(d,{onSubmit:e.compute},{default:(0,r.w5)((()=>[(0,r._)("div",D,[(0,r._)("div",M,[(0,r._)("div",q,[(0,r._)("div",B,[Z,(0,r.Wm)(n,{modelValue:e.operation.leftSide.type,"onUpdate:modelValue":t[0]||(t[0]=t=>e.operation.leftSide.type=t),"checked-icon":"check",color:"grey-5","false-value":e.ValueType.PLAIN,"true-value":e.ValueType.CIPHER,"keep-color":"","unchecked-icon":"clear",readonly:e.encOperation.isComputed,disable:e.encOperation.isComputed,label:"Ciphertext"},null,8,["modelValue","false-value","true-value","readonly","disable"])]),j,(0,r._)("div",Q,[U,(0,r.Wm)(n,{modelValue:e.operation.rightSide.type,"onUpdate:modelValue":t[1]||(t[1]=t=>e.operation.rightSide.type=t),"checked-icon":"check",color:"grey-5","false-value":e.ValueType.PLAIN,"true-value":e.ValueType.CIPHER,"keep-color":"","unchecked-icon":"clear",readonly:e.encOperation.isComputed,disable:e.encOperation.isComputed,label:"Ciphertext"},null,8,["modelValue","false-value","true-value","readonly","disable"])]),Y,X,(0,r.Wm)(c,{color:"black","bg-color":"white",outlined:"",readonly:e.encOperation.isComputed,class:"q-pa-sm lol",modelValue:e.operation.leftSide.value,"onUpdate:modelValue":t[2]||(t[2]=t=>e.operation.leftSide.value=t),rules:[e.validateInput,e=>e.toString().length>0||"Please input at least a number"],label:"Left parameter"},null,8,["readonly","modelValue","rules"]),(0,r.Wm)(u,{"bg-color":"white",outlined:"",style:{width:"130px"},class:"q-pa-sm",modelValue:e.operation.operator,"onUpdate:modelValue":t[3]||(t[3]=t=>e.operation.operator=t),options:e.operationsSigns,label:"Operator",disable:e.encOperation.isComputed},null,8,["modelValue","options","disable"]),(0,r.Wm)(c,{color:"black","bg-color":"white",outlined:"",class:"q-pa-sm",modelValue:e.operation.rightSide.value,"onUpdate:modelValue":t[4]||(t[4]=t=>e.operation.rightSide.value=t),readonly:e.encOperation.isComputed,rules:[e.validateInput,e=>e.toString().length>0||"Please input at least a number"],label:"Right parameter"},null,8,["modelValue","readonly","rules"]),(0,r.Wm)(c,{style:{width:"50px"},color:"black","bg-color":"white",outlined:"",class:"q-pa-sm",type:"text","model-value":"=",readonly:""}),(0,r.Wm)(z.uT,{duration:200,name:"nested"},{default:(0,r.w5)((()=>[e.showDecrypted?((0,r.wg)(),(0,r.iD)("div",J,[(0,r.Wm)(c,{color:"black","bg-color":"white",outlined:"",class:"q-pa-sm",type:"text",modelValue:e.operation.result,"onUpdate:modelValue":t[5]||(t[5]=t=>e.operation.result=t),readonly:e.encOperation.isComputed,label:"Result","input-class":"ellipsis"},null,8,["modelValue","readonly"])])):(0,r.kq)("",!0)])),_:1}),e.showDecrypted?(0,r.kq)("",!0):((0,r.wg)(),(0,r.iD)("div",ee,[(0,r.Wm)(c,{color:"black","bg-color":"white",outlined:"",class:"q-pa-sm",style:{visibility:"hidden"},type:"text",modelValue:e.operation.result,"onUpdate:modelValue":t[6]||(t[6]=t=>e.operation.result=t),label:"Result","input-class":"ellipsis"},null,8,["modelValue"])]))]),(0,r.Wm)(z.uT,{duration:200,name:"nested"},{default:(0,r.w5)((()=>[e.showEncrypted?((0,r.wg)(),(0,r.iD)("div",te,[(0,r._)("div",ae,[(0,r.Wm)(c,{color:"black","bg-color":"white",outlined:"",class:"q-pa-sm",modelValue:e.encOperation.leftSide.value,"onUpdate:modelValue":t[7]||(t[7]=t=>e.encOperation.leftSide.value=t),readonly:"",label:"Left parameter","input-class":"ellipsis"},null,8,["modelValue"]),(0,r.Wm)(u,{"bg-color":"white",outlined:"",style:{width:"130px"},class:"q-pa-sm",modelValue:e.operation.operator,"onUpdate:modelValue":t[8]||(t[8]=t=>e.operation.operator=t),options:e.operationsSigns,label:"Operator",readonly:""},null,8,["modelValue","options"]),(0,r.Wm)(c,{color:"black","bg-color":"white",outlined:"",class:"q-pa-sm",modelValue:e.encOperation.rightSide.value,"onUpdate:modelValue":t[9]||(t[9]=t=>e.encOperation.rightSide.value=t),label:"Right parameter",readonly:"","input-class":"ellipsis"},null,8,["modelValue"]),(0,r.Wm)(c,{style:{width:"50px"},color:"black","bg-color":"white",outlined:"",class:"q-pa-sm",type:"text","model-value":"=",readonly:""}),(0,r.Wm)(c,{color:"black","bg-color":"white",outlined:"",class:"q-pa-sm",type:"text",modelValue:e.encOperation.result,"onUpdate:modelValue":t[10]||(t[10]=t=>e.encOperation.result=t),readonly:"",label:"Result","input-class":"ellipsis"},null,8,["modelValue"])])])):(0,r.kq)("",!0)])),_:1})])]),(0,r._)("div",re,[(0,r.Wm)(p,{flat:"",type:"submit",disable:e.encOperation.isComputed,icon:"mdi-cogs"},{default:(0,r.w5)((()=>[se])),_:1},8,["disable"]),(0,r.Wm)(p,{flat:"",onClick:e.decrypt,disable:!e.operation.isComputed,icon:"mdi-key"},{default:(0,r.w5)((()=>[le])),_:1},8,["onClick","disable"])])])),_:1},8,["onSubmit"]),(0,r.Wm)(y,{showing:e.computingLoading,"label-style":{fontSize:"1.5rem",color:"black"}},{default:(0,r.w5)((()=>[(0,r.Wm)(h,{size:"50px",color:"black"}),(0,r._)("span",{style:(0,i.j5)({fontSize:"1.5rem",color:"black"})}," Computing.... ",4)])),_:1},8,["showing","label-style"])])),_:1})])),_:1})}var ie=a(4932);const ne=(0,r.aZ)({props:{scheme:{type:Object,required:!0}},setup(){const e=(0,u.iH)({leftSide:{value:"",type:ie.G.PLAIN},operator:"+",rightSide:{value:"",type:ie.G.PLAIN},result:"?",isComputed:!1}),t=(0,u.iH)({leftSide:{value:"",type:ie.G.PLAIN},operator:"+",rightSide:{value:"",type:ie.G.PLAIN},result:"?",isComputed:!1});return{operation:e,encOperation:t,ValueType:ie.G}},computed:{leftParameter(){const e=Array.from(this.operation.leftSide.value.split(","),(e=>Number.parseInt(e))).filter((e=>!Number.isNaN(e))),t=Array.from(this.operation.leftSide.value.split(","),(e=>Number.parseFloat(e))).filter((e=>!Number.isNaN(e)));switch(this.scheme.scheme.value){case p.Px.BFV:case p.Px.BGV:return Int32Array.from(e);case p.Px.CKKS:return Float64Array.from(t);default:return Int32Array.from(e)}},rightParameter(){const e=Array.from(this.operation.rightSide.value.split(","),(e=>Number.parseInt(e))).filter((e=>!Number.isNaN(e))),t=Array.from(this.operation.rightSide.value.split(","),(e=>Number.parseFloat(e))).filter((e=>!Number.isNaN(e)));switch(this.scheme.scheme.value){case p.Px.BFV:case p.Px.BGV:return Int32Array.from(e);case p.Px.CKKS:return Float64Array.from(t);default:return Int32Array.from(e)}}}}),ce=(0,r.aZ)({mixins:[ne],props:{scheme:{type:Object,required:!0},easyFHE:{type:Object,required:!0},publicKey:{type:Object,required:!0},secretKey:{type:Object,required:!0}},setup(){const e=(0,u.iH)({leftSide:{value:"",type:ie.G.PLAIN},operator:"+",rightSide:{value:"",type:ie.G.PLAIN},result:"?",isComputed:!1}),t=(0,u.iH)({leftSide:{value:"",type:ie.G.PLAIN},operator:"+",rightSide:{value:"",type:ie.G.PLAIN},result:"?",isComputed:!1});return{operation:e,encOperation:t,ValueType:ie.G}},computed:{computationMap(){return{[`${p.Px.BFV}`]:{[ie.G.PLAIN]:{["+"]:{[ie.G.PLAIN]:()=>{this.encOperation.leftSide.value=this.operation.leftSide.value,this.encOperation.rightSide.value=this.operation.rightSide.value,this.encOperation.result=String(Number(this.encOperation.leftSide.value)+Number(this.encOperation.rightSide.value)),this.encOperation.isComputed=!0},[ie.G.CIPHER]:()=>{this.encOperation.leftSide.value=this.operation.leftSide.value;const e=this.leftParameter,t=this.easyFHE.encrypt(this.rightParameter,this.publicKey);this.encOperation.rightSide.value=t.save();const a=this.easyFHE.Plain.add(t.save(),e);this.encOperation.result=a.save(),this.encOperation.isComputed=!0}},["-"]:{[ie.G.PLAIN]:()=>{this.encOperation.leftSide.value=this.operation.leftSide.value,this.encOperation.rightSide.value=this.operation.rightSide.value,this.encOperation.result=String(Number(this.encOperation.leftSide.value)-Number(this.encOperation.rightSide.value)),this.encOperation.isComputed=!0},[ie.G.CIPHER]:()=>{this.encOperation.leftSide.value=this.operation.leftSide.value;const e=this.leftParameter,t=this.easyFHE.encrypt(this.rightParameter,this.publicKey);this.encOperation.rightSide.value=t.save();const a=this.easyFHE.Plain.sub(t.save(),e);this.encOperation.result=a.save(),this.encOperation.isComputed=!0}},["*"]:{[ie.G.PLAIN]:()=>{this.encOperation.leftSide.value=this.operation.leftSide.value,this.encOperation.rightSide.value=this.operation.rightSide.value,this.encOperation.result=String(Number(this.encOperation.leftSide.value)*Number(this.encOperation.rightSide.value)),this.encOperation.isComputed=!0},[ie.G.CIPHER]:()=>{this.encOperation.leftSide.value=this.operation.leftSide.value;const e=this.leftParameter,t=this.easyFHE.encrypt(this.rightParameter,this.publicKey);this.encOperation.rightSide.value=t.save();const a=this.easyFHE.Plain.multiply(t.save(),e);this.encOperation.result=a.save(),this.encOperation.isComputed=!0}}},[ie.G.CIPHER]:{["+"]:{[ie.G.PLAIN]:()=>{const e=this.easyFHE.encrypt(this.leftParameter,this.publicKey),t=this.rightParameter;this.encOperation.rightSide.value=this.operation.rightSide.value,this.encOperation.leftSide.value=e.save();const a=this.easyFHE.Plain.add(e.save(),t);this.encOperation.result=a.save(),this.encOperation.isComputed=!0},[ie.G.CIPHER]:()=>{const e=this.easyFHE.encrypt(this.leftParameter,this.publicKey),t=this.easyFHE.encrypt(this.rightParameter,this.publicKey);this.encOperation.leftSide.value=e.save(),this.encOperation.rightSide.value=t.save();const a=this.easyFHE.Cipher.add(e.save(),t.save());this.encOperation.result=a.save(),this.encOperation.isComputed=!0}},["-"]:{[ie.G.PLAIN]:()=>{const e=this.easyFHE.encrypt(this.leftParameter,this.publicKey),t=this.rightParameter;this.encOperation.rightSide.value=this.operation.rightSide.value,this.encOperation.leftSide.value=e.save();const a=this.easyFHE.Plain.sub(e.save(),t);this.encOperation.result=a.save(),this.encOperation.isComputed=!0},[ie.G.CIPHER]:()=>{const e=this.easyFHE.encrypt(this.leftParameter,this.publicKey),t=this.easyFHE.encrypt(this.rightParameter,this.publicKey);this.encOperation.leftSide.value=e.save(),this.encOperation.rightSide.value=t.save();const a=this.easyFHE.Cipher.sub(e.save(),t.save());this.encOperation.result=a.save(),this.encOperation.isComputed=!0}},["*"]:{[ie.G.PLAIN]:()=>{const e=this.easyFHE.encrypt(this.leftParameter,this.publicKey),t=this.rightParameter;this.encOperation.rightSide.value=this.operation.rightSide.value,this.encOperation.leftSide.value=e.save();const a=this.easyFHE.Plain.multiply(e.save(),t);this.encOperation.result=a.save(),this.encOperation.isComputed=!0},[ie.G.CIPHER]:()=>{const e=this.easyFHE.encrypt(this.leftParameter,this.publicKey),t=this.easyFHE.encrypt(this.rightParameter,this.publicKey);this.encOperation.leftSide.value=e.save(),this.encOperation.rightSide.value=t.save();const a=this.easyFHE.Cipher.multiply(e.save(),t.save());this.encOperation.result=a.save(),this.encOperation.isComputed=!0}}}},[`${p.Px.BGV}`]:{[ie.G.PLAIN]:{["+"]:{[ie.G.PLAIN]:()=>{this.encOperation.leftSide.value=this.operation.leftSide.value,this.encOperation.rightSide.value=this.operation.rightSide.value,this.encOperation.result=String(Number(this.encOperation.leftSide.value)+Number(this.encOperation.rightSide.value)),this.encOperation.isComputed=!0},[ie.G.CIPHER]:()=>{this.encOperation.leftSide.value=this.operation.leftSide.value;const e=this.leftParameter,t=this.easyFHE.encrypt(this.rightParameter,this.publicKey);this.encOperation.rightSide.value=t.save();const a=this.easyFHE.Plain.add(t.save(),e);this.encOperation.result=a.save(),this.encOperation.isComputed=!0}},["-"]:{[ie.G.PLAIN]:()=>{this.encOperation.leftSide.value=this.operation.leftSide.value,this.encOperation.rightSide.value=this.operation.rightSide.value,this.encOperation.result=String(Number(this.encOperation.leftSide.value)-Number(this.encOperation.rightSide.value)),this.encOperation.isComputed=!0},[ie.G.CIPHER]:()=>{this.encOperation.leftSide.value=this.operation.leftSide.value;const e=this.leftParameter,t=this.easyFHE.encrypt(this.rightParameter,this.publicKey);this.encOperation.rightSide.value=t.save();const a=this.easyFHE.Plain.sub(t.save(),e);this.encOperation.result=a.save(),this.encOperation.isComputed=!0}},["*"]:{[ie.G.PLAIN]:()=>{this.encOperation.leftSide.value=this.operation.leftSide.value,this.encOperation.rightSide.value=this.operation.rightSide.value,this.encOperation.result=String(Number(this.encOperation.leftSide.value)*Number(this.encOperation.rightSide.value)),this.encOperation.isComputed=!0},[ie.G.CIPHER]:()=>{this.encOperation.leftSide.value=this.operation.leftSide.value;const e=this.leftParameter,t=this.easyFHE.encrypt(this.rightParameter,this.publicKey);this.encOperation.rightSide.value=t.save();const a=this.easyFHE.Plain.multiply(t.save(),e);this.encOperation.result=a.save(),this.encOperation.isComputed=!0}}},[ie.G.CIPHER]:{["+"]:{[ie.G.PLAIN]:()=>{const e=this.easyFHE.encrypt(this.leftParameter,this.publicKey),t=this.rightParameter;this.encOperation.rightSide.value=this.operation.rightSide.value,this.encOperation.leftSide.value=e.save();const a=this.easyFHE.Plain.add(e.save(),t);this.encOperation.result=a.save(),this.encOperation.isComputed=!0},[ie.G.CIPHER]:()=>{const e=this.easyFHE.encrypt(this.leftParameter,this.publicKey),t=this.easyFHE.encrypt(this.rightParameter,this.publicKey);this.encOperation.leftSide.value=e.save(),this.encOperation.rightSide.value=t.save();const a=this.easyFHE.Cipher.add(e.save(),t.save());this.encOperation.result=a.save(),this.encOperation.isComputed=!0}},["-"]:{[ie.G.PLAIN]:()=>{const e=this.easyFHE.encrypt(this.leftParameter,this.publicKey),t=this.rightParameter;this.encOperation.rightSide.value=this.operation.rightSide.value,this.encOperation.leftSide.value=e.save();const a=this.easyFHE.Plain.sub(e.save(),t);this.encOperation.result=a.save(),this.encOperation.isComputed=!0},[ie.G.CIPHER]:()=>{const e=this.easyFHE.encrypt(this.leftParameter,this.publicKey),t=this.easyFHE.encrypt(this.rightParameter,this.publicKey);this.encOperation.leftSide.value=e.save(),this.encOperation.rightSide.value=t.save();const a=this.easyFHE.Cipher.sub(e.save(),t.save());this.encOperation.result=a.save(),this.encOperation.isComputed=!0}},["*"]:{[ie.G.PLAIN]:()=>{const e=this.easyFHE.encrypt(this.leftParameter,this.publicKey),t=this.rightParameter;this.encOperation.rightSide.value=this.operation.rightSide.value,this.encOperation.leftSide.value=e.save();const a=this.easyFHE.Plain.multiply(e.save(),t);this.encOperation.result=a.save(),this.encOperation.isComputed=!0},[ie.G.CIPHER]:()=>{const e=this.easyFHE.encrypt(this.leftParameter,this.publicKey),t=this.easyFHE.encrypt(this.rightParameter,this.publicKey);this.encOperation.leftSide.value=e.save(),this.encOperation.rightSide.value=t.save();const a=this.easyFHE.Cipher.multiply(e.save(),t.save());this.encOperation.result=a.save(),this.encOperation.isComputed=!0}}}},[`${p.Px.CKKS}`]:{[ie.G.PLAIN]:{["+"]:{[ie.G.PLAIN]:()=>{this.encOperation.leftSide.value=this.operation.leftSide.value,this.encOperation.rightSide.value=this.operation.rightSide.value,this.encOperation.result=String(Number.parseFloat(this.encOperation.leftSide.value)+Number.parseFloat(this.encOperation.rightSide.value)),this.encOperation.isComputed=!0},[ie.G.CIPHER]:()=>{this.encOperation.leftSide.value=this.operation.leftSide.value;const e=this.leftParameter,t=this.easyFHE.encrypt(this.rightParameter,this.publicKey);this.encOperation.rightSide.value=t.save();const a=this.easyFHE.Plain.add(t.save(),e);this.encOperation.result=a.save(),this.encOperation.isComputed=!0}},["-"]:{[ie.G.PLAIN]:()=>{this.encOperation.leftSide.value=this.operation.leftSide.value,this.encOperation.rightSide.value=this.operation.rightSide.value,this.encOperation.result=String(Number.parseFloat(this.encOperation.leftSide.value)-Number.parseFloat(this.encOperation.rightSide.value)),this.encOperation.isComputed=!0},[ie.G.CIPHER]:()=>{this.encOperation.leftSide.value=this.operation.leftSide.value;const e=this.leftParameter,t=this.easyFHE.encrypt(this.rightParameter,this.publicKey);this.encOperation.rightSide.value=t.save();const a=this.easyFHE.Plain.sub(t.save(),e);this.encOperation.result=a.save(),this.encOperation.isComputed=!0}},["*"]:{[ie.G.PLAIN]:()=>{this.encOperation.leftSide.value=this.operation.leftSide.value,this.encOperation.rightSide.value=this.operation.rightSide.value,this.encOperation.result=String(Number.parseFloat(this.encOperation.leftSide.value)*Number.parseFloat(this.encOperation.rightSide.value)),this.encOperation.isComputed=!0},[ie.G.CIPHER]:()=>{this.encOperation.leftSide.value=this.operation.leftSide.value;const e=this.leftParameter,t=this.easyFHE.encrypt(this.rightParameter,this.publicKey);this.encOperation.rightSide.value=t.save();const a=this.easyFHE.Plain.multiply(t.save(),e);this.encOperation.result=a.save(),this.encOperation.isComputed=!0}}},[ie.G.CIPHER]:{["+"]:{[ie.G.PLAIN]:()=>{const e=this.easyFHE.encrypt(this.leftParameter,this.publicKey),t=this.rightParameter;this.encOperation.rightSide.value=this.operation.rightSide.value,this.encOperation.leftSide.value=e.save();const a=this.easyFHE.Plain.add(e.save(),t);this.encOperation.result=a.save(),this.encOperation.isComputed=!0},[ie.G.CIPHER]:()=>{const e=this.easyFHE.encrypt(this.leftParameter,this.publicKey),t=this.easyFHE.encrypt(this.rightParameter,this.publicKey);this.encOperation.leftSide.value=e.save(),this.encOperation.rightSide.value=t.save();const a=this.easyFHE.Cipher.add(e.save(),t.save());this.encOperation.result=a.save(),this.encOperation.isComputed=!0}},["-"]:{[ie.G.PLAIN]:()=>{const e=this.easyFHE.encrypt(this.leftParameter,this.publicKey),t=this.rightParameter;this.encOperation.rightSide.value=this.operation.rightSide.value,this.encOperation.leftSide.value=e.save();const a=this.easyFHE.Plain.sub(e.save(),t);this.encOperation.result=a.save(),this.encOperation.isComputed=!0},[ie.G.CIPHER]:()=>{const e=this.easyFHE.encrypt(this.leftParameter,this.publicKey),t=this.easyFHE.encrypt(this.rightParameter,this.publicKey);this.encOperation.leftSide.value=e.save(),this.encOperation.rightSide.value=t.save();const a=this.easyFHE.Cipher.sub(e.save(),t.save());this.encOperation.result=a.save(),this.encOperation.isComputed=!0}},["*"]:{[ie.G.PLAIN]:()=>{const e=this.easyFHE.encrypt(this.leftParameter,this.publicKey),t=this.rightParameter;this.encOperation.rightSide.value=this.operation.rightSide.value,this.encOperation.leftSide.value=e.save();const a=this.easyFHE.Plain.multiply(e.save(),t);this.encOperation.result=a.save(),this.encOperation.isComputed=!0},[ie.G.CIPHER]:()=>{const e=this.easyFHE.encrypt(this.leftParameter,this.publicKey),t=this.easyFHE.encrypt(this.rightParameter,this.publicKey);this.encOperation.leftSide.value=e.save(),this.encOperation.rightSide.value=t.save();const a=this.easyFHE.Cipher.multiply(e.save(),t.save());this.encOperation.result=a.save(),this.encOperation.isComputed=!0}}}}}}}}),ue=(0,r.aZ)({components:{},mixins:[ne],props:{scheme:{type:Object,required:!0},easyFHE:{type:Object,required:!0},publicKey:{type:Object,required:!0},secretKey:{type:Object,required:!0}},setup(){const e=(0,u.iH)({leftSide:{value:"",type:ie.G.PLAIN},operator:"+",rightSide:{value:"",type:ie.G.PLAIN},result:"?",isComputed:!1}),t=(0,u.iH)({leftSide:{value:"",type:ie.G.PLAIN},operator:"+",rightSide:{value:"",type:ie.G.PLAIN},result:"?",isComputed:!1});return{operation:e,encOperation:t,ValueType:ie.G,showDecrypted:(0,u.iH)(!1)}},methods:{decryptPlainResult(){this.showDecrypted=!0,this.operation.isComputed=!0,this.operation.result=this.encOperation.result},decryptCipherResult(){const e=this.easyFHE.decrypt(this.encOperation.result,this.secretKey);this.showDecrypted=!0,this.operation.isComputed=!0,this.operation.result=e.toString()}},computed:{decryptionMap(){return{[`${p.Px.BFV}`]:{[ie.G.PLAIN]:{["+"]:{[ie.G.PLAIN]:()=>{this.decryptPlainResult()},[ie.G.CIPHER]:()=>{this.decryptCipherResult()}},["-"]:{[ie.G.PLAIN]:()=>{this.decryptPlainResult()},[ie.G.CIPHER]:()=>{this.decryptCipherResult()}},["*"]:{[ie.G.PLAIN]:()=>{this.decryptPlainResult()},[ie.G.CIPHER]:()=>{this.decryptCipherResult()}}},[ie.G.CIPHER]:{["+"]:{[ie.G.PLAIN]:()=>{this.decryptCipherResult()},[ie.G.CIPHER]:()=>{this.decryptCipherResult()}},["-"]:{[ie.G.PLAIN]:()=>{this.decryptCipherResult()},[ie.G.CIPHER]:()=>{this.decryptCipherResult()}},["*"]:{[ie.G.PLAIN]:()=>{this.decryptCipherResult()},[ie.G.CIPHER]:()=>{this.decryptCipherResult()}}}},[`${p.Px.BGV}`]:{[ie.G.PLAIN]:{["+"]:{[ie.G.PLAIN]:()=>{this.decryptPlainResult()},[ie.G.CIPHER]:()=>{this.decryptCipherResult()}},["-"]:{[ie.G.PLAIN]:()=>{this.decryptPlainResult()},[ie.G.CIPHER]:()=>{this.decryptCipherResult()}},["*"]:{[ie.G.PLAIN]:()=>{this.decryptPlainResult()},[ie.G.CIPHER]:()=>{this.decryptCipherResult()}}},[ie.G.CIPHER]:{["+"]:{[ie.G.PLAIN]:()=>{this.decryptCipherResult()},[ie.G.CIPHER]:()=>{this.decryptCipherResult()}},["-"]:{[ie.G.PLAIN]:()=>{this.decryptCipherResult()},[ie.G.CIPHER]:()=>{this.decryptCipherResult()}},["*"]:{[ie.G.PLAIN]:()=>{this.decryptCipherResult()},[ie.G.CIPHER]:()=>{this.decryptCipherResult()}}}},[`${p.Px.CKKS}`]:{[ie.G.PLAIN]:{["+"]:{[ie.G.PLAIN]:()=>{this.decryptPlainResult()},[ie.G.CIPHER]:()=>{this.decryptCipherResult()}},["-"]:{[ie.G.PLAIN]:()=>{this.decryptPlainResult()},[ie.G.CIPHER]:()=>{this.decryptCipherResult()}},["*"]:{[ie.G.PLAIN]:()=>{this.decryptPlainResult()},[ie.G.CIPHER]:()=>{this.decryptCipherResult()}}},[ie.G.CIPHER]:{["+"]:{[ie.G.PLAIN]:()=>{this.decryptCipherResult()},[ie.G.CIPHER]:()=>{this.decryptCipherResult()}},["-"]:{[ie.G.PLAIN]:()=>{this.decryptCipherResult()},[ie.G.CIPHER]:()=>{this.decryptCipherResult()}},["*"]:{[ie.G.PLAIN]:()=>{this.decryptCipherResult()},[ie.G.CIPHER]:()=>{this.decryptCipherResult()}}}}}}}}),pe=(0,r.aZ)({name:"OperationBuilder",emits:["updateOperation"],components:{},mixins:[ce,ue],props:{scheme:{type:Object,required:!0},easyFHE:{type:Object,required:!0},publicKey:{type:Object,required:!0},secretKey:{type:Object,required:!0}},setup(){const e=(0,l.C)(),{homomorphicSchemes:t,operationSpeedMap:a}=(0,o.Jk)(e),r=["+","-","*"],s=(0,u.iH)({leftSide:{value:"",type:ie.G.PLAIN},operator:"+",rightSide:{value:"",type:ie.G.PLAIN},result:"?",isComputed:!1}),i=(0,u.iH)({leftSide:{value:"",type:ie.G.PLAIN},operator:"+",rightSide:{value:"",type:ie.G.PLAIN},result:"?",isComputed:!1});return{computingLoading:(0,u.iH)(!1),showEncrypted:(0,u.iH)(!1),showDecrypted:(0,u.iH)(!1),operationsSigns:r,homomorphicSchemes:t,operation:s,encOperation:i,ValueType:ie.G,operationSpeedMap:a}},computed:{leftParameter(){const e=Array.from(this.operation.leftSide.value.split(","),(e=>Number.parseInt(e))).filter((e=>!Number.isNaN(e))),t=Array.from(this.operation.leftSide.value.split(","),(e=>Number.parseFloat(e))).filter((e=>!Number.isNaN(e)));switch(this.scheme.scheme.value){case p.Px.BFV:case p.Px.BGV:default:return Int32Array.from(e);case p.Px.CKKS:return Float64Array.from(t)}},rightParameter(){const e=Array.from(this.operation.rightSide.value.split(","),(e=>Number.parseInt(e))).filter((e=>!Number.isNaN(e))),t=Array.from(this.operation.rightSide.value.split(","),(e=>Number.parseFloat(e))).filter((e=>!Number.isNaN(e)));switch(this.scheme.scheme.value){case p.Px.BFV:case p.Px.BGV:default:return Int32Array.from(e);case p.Px.CKKS:return Float64Array.from(t)}}},methods:{validateInput(e){const t=/[a-z]/gi;return!t.test(e)||"Please input only numbers!"},delay(e){return new Promise((t=>setTimeout(t,e)))},processingSpeedBenchmark(e,t){const a=[ie.G.PLAIN,ie.G.CIPHER],r=["+","-","*"],s=this.scheme.scheme.value,l=this.scheme.security.value,o=this.scheme.speed.value,i=this.scheme.precision.value;for(let n of a)for(let c of r)for(let r of a)this.operationSpeedMap.easyFhe[`${s}`][l][o][i][n][c][r]+=t-e,this.operationSpeedMap.nodeSeal[`${s}`][l][o][i][n][c][r]+=t-e},compute(){this.computingLoading=!0,this.$emit("updateOperation",this.operation);const e=this.scheme.scheme.value,t=this.operation.leftSide.type,a=this.operation.operator,r=this.operation.rightSide.type,s=Date.now();this.computationMap[e][t][a][r]();const l=Date.now();this.processingSpeedBenchmark(s,l),this.operation.isComputed=!0,this.delay(1e3).then((()=>{this.computingLoading=!1})).then((()=>{this.delay(300).then((()=>{this.showEncrypted=!0}))}))},decrypt(){const e=this.scheme.scheme.value,t=this.operation.leftSide.type,a=this.operation.operator,r=this.operation.rightSide.type,s=Date.now();this.decryptionMap[e][t][a][r]();const l=Date.now();this.processingSpeedBenchmark(s,l)}}});var de=a(592),he=a(6611),ye=a(854),$e=a(9120),me=a(8149);const fe=(0,h.Z)(pe,[["render",oe],["__scopeId","data-v-3572af60"]]),ge=fe;C()(pe,"components",{QCard:$.Z,QCardSection:f.Z,QForm:m.Z,QToggle:de.Z,QInput:he.Z,QSelect:v.Z,QBtn:R.Z,QInnerLoading:ye.Z,QSpinnerGears:$e.Z,QField:me.Z});const ve={class:"q-pa-md q-gutter-sm"},Ve=(0,r.Uk)("Close"),xe=(0,r._)("div",{class:"text-h5 text-center"},"Code Comparison",-1),Se={class:"row no-wrap"},Pe={class:"col easy-FHE"},be=(0,r._)("div",{class:"text-subtitle1 text-center q-pb-md"},"EasyFHE",-1),Re={class:"col node-SEAL"},Ee=(0,r._)("div",{class:"text-subtitle1 text-center q-pb-md"},"node-SEAL",-1),Ce=(0,r._)("div",{class:"text-h5 text-center"},"Metrics",-1),Le=(0,r.Uk)("Full screen graphs"),Fe={class:"q-ma-sm row"},we={id:"loc-chart",class:"col"},He=(0,r._)("div",{class:"text-center"},"Lines of Code",-1),Ie={id:"speed-chart",class:"col"},Ke=(0,r._)("div",{class:"text-center"},"Speed",-1),Ae={id:"memory-chart",class:"col"},Oe=(0,r._)("div",{class:"text-center"},"Memory usage",-1);function Ge(e,t,a,s,l,o){const n=(0,r.up)("q-space"),c=(0,r.up)("q-tooltip"),u=(0,r.up)("q-btn"),p=(0,r.up)("q-bar"),d=(0,r.up)("q-card-section"),h=(0,r.up)("q-separator"),y=(0,r.up)("Code"),$=(0,r.up)("q-scroll-area"),m=(0,r.up)("Graphs"),f=(0,r.up)("VueApexCharts"),g=(0,r.up)("q-card"),v=(0,r.up)("q-dialog"),V=(0,r.Q2)("close-popup");return(0,r.wg)(),(0,r.iD)("div",ve,[(0,r.Wm)(v,{modelValue:e.openCodeComparisonDialog,"onUpdate:modelValue":t[0]||(t[0]=t=>e.openCodeComparisonDialog=t),persistent:"",maximized:e.isFullScreen,"transition-show":"slide-up","transition-hide":"slide-down","full-width":""},{default:(0,r.w5)((()=>[(0,r.Wm)(g,{class:"bg-white text-black"},{default:(0,r.w5)((()=>[(0,r.Wm)(p,{class:"bg-primary text-white"},{default:(0,r.w5)((()=>[(0,r.Wm)(n),(0,r.Wm)(u,{dense:"",flat:"",class:"q-pa-md",icon:e.isFullScreen?"mdi-arrow-collapse":"mdi-arrow-expand",onClick:e.toggleFullscreen},{default:(0,r.w5)((()=>[(0,r.Wm)(c,{offset:[0,10],class:"bg-primary text-white"},{default:(0,r.w5)((()=>[(0,r.Uk)((0,i.zw)(e.isFullScreen?"Minimized":"Fullscreen"),1)])),_:1})])),_:1},8,["icon","onClick"]),(0,r.wy)(((0,r.wg)(),(0,r.j4)(u,{class:"q-pa-md",dense:"",flat:"",icon:"close"},{default:(0,r.w5)((()=>[(0,r.Wm)(c,{offset:[0,10],class:"bg-primary text-white"},{default:(0,r.w5)((()=>[Ve])),_:1})])),_:1})),[[V]])])),_:1}),(0,r.Wm)(d,null,{default:(0,r.w5)((()=>[xe])),_:1}),(0,r.Wm)(h),(0,r.Wm)(d,null,{default:(0,r.w5)((()=>[(0,r._)("div",Se,[(0,r._)("div",Pe,[be,(0,r.Wm)($,{visible:"","thumb-style":e.thumbStyle,"bar-style":e.barStyle,style:(0,i.j5)({height:e.isFullScreen?"40vh":"30vh"}),ref:"firstRef",onScroll:e.onScrollFirst},{default:(0,r.w5)((()=>[(0,r.Wm)(y,{scheme:e.scheme,generatedCode:"easy-FHE"},null,8,["scheme"])])),_:1},8,["thumb-style","bar-style","style","onScroll"])]),(0,r._)("div",Re,[Ee,(0,r.Wm)($,{visible:"","thumb-style":e.thumbStyle,"bar-style":e.barStyle,style:(0,i.j5)({height:e.isFullScreen?"40vh":"30vh"}),ref:"secondRef",onScroll:e.onScrollSecond},{default:(0,r.w5)((()=>[(0,r.Wm)(y,{scheme:e.scheme,generatedCode:"node-SEAL"},null,8,["scheme"])])),_:1},8,["thumb-style","bar-style","style","onScroll"])])])])),_:1}),(0,r.Wm)(h),(0,r.Wm)(d,null,{default:(0,r.w5)((()=>[Ce,(0,r.Wm)(u,{flat:"",icon:"mdi-chart-bar",onClick:e.openGraphs},{default:(0,r.w5)((()=>[Le])),_:1},8,["onClick"]),(0,r.Wm)(m,{scheme:e.scheme},null,8,["scheme"]),(0,r._)("div",Fe,[(0,r._)("div",we,[He,(0,r.Wm)(f,{type:"bar",height:"250",options:e.chartOptionsLoC,series:e.seriesLoC},null,8,["options","series"])]),(0,r._)("div",Ie,[Ke,(0,r.Wm)(f,{type:"bar",height:"250",options:e.chartOptionsSpeed,series:e.seriesSpeed},null,8,["options","series"])]),(0,r._)("div",Ae,[Oe,(0,r.Wm)(f,{type:"bar",height:"250",options:e.chartOptionsMemory,series:e.seriesMemory},null,8,["options","series"])])])])),_:1})])),_:1})])),_:1},8,["modelValue","maximized"])])}var Ne=a(7092),Te=a.n(Ne);const ke={class:"code-container"},We={class:"line-number"},ze={class:"line-code"};function _e(e,t,a,s,l,o){return(0,r.wg)(),(0,r.iD)("div",ke,[((0,r.wg)(!0),(0,r.iD)(r.HY,null,(0,r.Ko)(e.code,((e,t)=>((0,r.wg)(),(0,r.iD)("div",{key:t,class:"code-lines-container"},[(0,r._)("div",We,(0,i.zw)(t+1),1),(0,r._)("div",ze,(0,i.zw)(e),1)])))),128))])}const De=(0,r.aZ)({components:{},mixins:[ne],props:{scheme:{type:Object,required:!0}},setup(){return{ValueType:ie.G}},methods:{generatedLeftParameter(e){const t=Array.from(e.leftSide.value.split(","),(e=>Number.parseInt(e))).filter((e=>!Number.isNaN(e))),a=Array.from(e.leftSide.value.split(","),(e=>Number.parseFloat(e))).filter((e=>!Number.isNaN(e)));switch(this.scheme.scheme.value){case p.Px.BFV:case p.Px.BGV:return`Int32Array.from([${t.toString()}])`;case p.Px.CKKS:return`Float64Array.from([${a.toString()}])`;default:return`Int32Array.from([${t.toString()}])`}},generatedRightParameter(e){const t=Array.from(e.rightSide.value.split(","),(e=>Number.parseInt(e))).filter((e=>!Number.isNaN(e))),a=Array.from(e.rightSide.value.split(","),(e=>Number.parseFloat(e))).filter((e=>!Number.isNaN(e)));switch(this.scheme.scheme.value){case p.Px.BFV:case p.Px.BGV:return`Int32Array.from([${t.toString()}])`;case p.Px.CKKS:return`Float64Array.from([${a.toString()}])`;default:return`Int32Array.from([${t.toString()}])`}}},computed:{computedScheme(){return{[p.Px.NONE]:"EasyScheme.NONE",[p.Px.BFV]:"EasyScheme.BFV",[p.Px.BGV]:"EasyScheme.BGV",[p.Px.CKKS]:"EasyScheme.CKKS"}},computedSecurity(){return{[p.qg.TC128]:"EasySecurity.TC128",[p.qg.TC192]:"EasySecurity.TC192",[p.qg.TC256]:"EasySecurity.TC256"}},computedSpeed(){return{[p.Nk.VERY_FAST]:"EasySpeed.VERY_FAST",[p.Nk.FAST]:"EasySpeed.FAST",[p.Nk.NORMAL]:"EasySpeed.NORMAL",[p.Nk.SLOW]:"EasySpeed.SLOW",[p.Nk.VERY_SLOW]:"EasySpeed.VERY_SLOW"}},computedPrecision(){return{[p.Hr.LOW]:"EasyPrecision.LOW",[p.Hr.NORMAL]:"EasyPrecision.NORMAL",[p.Hr.HIGH]:"EasyPrecision.HIGH"}},easyFHESetupHeader(){switch(this.scheme.scheme.value){case p.Px.BFV:case p.Px.BGV:return{code:["<script lang='ts'>","","import getEasyFHE, {","  EasyScheme,","  EasySecurity,","  EasySpeed,","  EasyFHE,","} from 'easyFHE';","","(async () => {","    // Get the WebAssembly module","    const easyFhe: EasyFHE = await getEasyFHE();","    // Initialize it","    await easyFhe.Setup.initialize();","","    // Set your preferred encryption parameters","    easyFhe.Setup.fastSetup(",`      ${this.computedScheme[this.scheme.scheme.value]},`,`      ${this.computedSecurity[this.scheme.security.value]},`,`      ${this.computedSpeed[this.scheme.speed.value]},`,"    );","","    // Generate a keypair","    const [publicKey, secretKey] = easyFhe.generateKeys();","","","","    easyFhe.deallocateLibrary();","    publicKey.delete();","    secretKey.delete();","})()","","</style>"],atIndexToInsert:25};case p.Px.CKKS:return{code:["<script lang='ts'>","","import getEasyFHE, {","  EasyScheme,","  EasySecurity,","  EasySpeed,","  EasyFHE,","  EasyPrecision,","} from 'easyFHE';","","(async () => {","    // Get the WebAssembly module","    const easyFhe: EasyFHE = await getEasyFHE();","    // Initialize it","    await easyFhe.Setup.initialize();","","    // Set your preferred encryption parameters","    easyFhe.Setup.fastSetup(",`      ${this.computedScheme[this.scheme.scheme.value]},`,`      ${this.computedSecurity[this.scheme.security.value]},`,`      ${this.computedSpeed[this.scheme.speed.value]},`,`      ${this.computedPrecision[this.scheme.precision.value]},`,"    );","","    // Generate a keypair","    const [publicKey, secretKey] = easyFhe.generateKeys();","","    easyFhe.deallocateLibrary();","    publicKey.delete();","    secretKey.delete();","})()","","</style>"],atIndexToInsert:26};default:return{code:["<script lang='ts'>","","import getEasyFHE, {","  EasyScheme,","  EasySecurity,","  EasySpeed,","  EasyFHE,","} from 'easyFHE';","","(async () => {","    // Get the WebAssembly module","    const easyFhe: EasyFHE = await getEasyFHE();","    // Initialize it","    await easyFhe.Setup.initialize();","","    // Set your preferred encryption parameters","    easyFhe.Setup.fastSetup(",`      ${this.computedScheme[this.scheme.scheme.value]},`,`      ${this.computedSecurity[this.scheme.security.value]},`,`      ${this.computedSpeed[this.scheme.speed.value]},`,"    );","","    // Generate a keypair","    const [publicKey, secretKey] = easyFhe.generateKeys();","","","","    easyFhe.deallocateLibrary();","    publicKey.delete();","    secretKey.delete();","})()","","</style>"],atIndexToInsert:25}}},easyFHECodeMap(){return{[`${p.Px.BFV}`]:{[ie.G.PLAIN]:{["+"]:{[ie.G.PLAIN]:(e,t)=>{const a=this.generatedLeftParameter(e),r=this.generatedRightParameter(e);return["     // plaintext + plaintext","     //--------------------------------------",`     const leftValue${t} = ${a};`,`     const rightValue${t} = ${r};`,`     const maxSize${t} =`,`       leftValue${t}.length > rightValue${t}.length ? leftValue${t}.length : rightValue${t}.length;`,`     const result${t} = Int32Array.from(new Array(maxSize${t}).fill(0));`,`     for (let i = 0; i < result${t}.length; i++) {`,`       result${t}[i] = leftValue${t}[i] + rightValue${t}[i];`,"     }","     //--------------------------------------"]},[ie.G.CIPHER]:(e,t)=>{const a=this.generatedLeftParameter(e),r=this.generatedRightParameter(e);return["     // plaintext + ciphertext","     //--------------------------------------",`     const leftValue${t} = ${a};`,`     const rightValue${t} = easyFhe.encrypt(${r}, publicKey);`,`     const encResult${t} = easyFhe.Plain.add(rightValue${t}.save(), leftValue${t});`,`     const result${t} = easyFhe.decrypt(encResult${t}.save(), secretKey);`,"     //--------------------------------------"]}},["-"]:{[ie.G.PLAIN]:(e,t)=>{const a=this.generatedLeftParameter(e),r=this.generatedRightParameter(e);return["     // plaintext - plaintext","     //--------------------------------------",`     const leftValue${t} = ${a};`,`     const rightValue${t} = ${r};`,`     const maxSize${t} =`,`       leftValue${t}.length > rightValue${t}.length ? leftValue${t}.length : rightValue${t}.length;`,`     const result${t} = Int32Array.from(new Array(maxSize${t}).fill(0));`,`     for (let i = 0; i < result${t}.length; i++) {`,`       result${t}[i] = leftValue${t}[i] - rightValue${t}[i];`,"     }","     //--------------------------------------"]},[ie.G.CIPHER]:(e,t)=>{const a=this.generatedLeftParameter(e),r=this.generatedRightParameter(e);return["     // plaintext - ciphertext","     //--------------------------------------",`     const leftValue${t} = ${a};`,`     const rightValue${t} = easyFhe.encrypt(${r}, publicKey);`,`     const encResult${t} = easyFhe.Plain.sub(rightValue${t}.save(), leftValue${t});`,`     const result${t} = easyFhe.decrypt(encResult${t}.save(), secretKey);`,"     //--------------------------------------"]}},["*"]:{[ie.G.PLAIN]:(e,t)=>{const a=this.generatedLeftParameter(e),r=this.generatedRightParameter(e);return["     // plaintext * plaintext","     //--------------------------------------",`     const leftValue${t} = ${a};`,`     const rightValue${t} = ${r};`,`     const maxSize${t} =`,`       leftValue${t}.length > rightValue${t}.length ? leftValue${t}.length : rightValue${t}.length;`,`     const result${t} = Int32Array.from(new Array(maxSize${t}).fill(0));`,`     for (let i = 0; i < result${t}.length; i++) {`,`       result${t}[i] = leftValue${t}[i] * rightValue${t}[i];`,"     }","     //--------------------------------------"]},[ie.G.CIPHER]:(e,t)=>{const a=this.generatedLeftParameter(e),r=this.generatedRightParameter(e);return["     // plaintext * ciphertext","     //--------------------------------------",`     const leftValue${t} = ${a};`,`     const rightValue${t} = easyFhe.encrypt(${r}, publicKey);`,`     const encResult${t} = easyFhe.Plain.multiply(rightValue${t}.save(), leftValue${t});`,`     const result${t} = easyFhe.decrypt(encResult${t}.save(), secretKey);`,"     //--------------------------------------"]}}},[ie.G.CIPHER]:{["+"]:{[ie.G.PLAIN]:(e,t)=>{const a=this.generatedLeftParameter(e),r=this.generatedRightParameter(e);return["     // ciphertext + plaintext","     //--------------------------------------",`     const leftValue${t} = easyFhe.encrypt(${a}, publicKey);`,`     const rightValue${t} = ${r};`,`     const encResult${t} = easyFhe.Plain.add(leftValue${t}.save(), rightValue${t});`,`     const result${t} = easyFhe.decrypt(encResult${t}.save(), secretKey);`,"     //--------------------------------------"]},[ie.G.CIPHER]:(e,t)=>{const a=this.generatedLeftParameter(e),r=this.generatedRightParameter(e);return["     // ciphertext + ciphertext","     //--------------------------------------",`     const leftValue${t} = easyFhe.encrypt(${a}, publicKey);`,`     const rightValue${t} = easyFhe.encrypt(${r}, publicKey);`,`     const encResult${t} = easyFhe.Cipher.add(leftValue${t}.save(), rightValue${t}.save());`,`     const result${t} = easyFhe.decrypt(encResult${t}.save(), secretKey);`,"     //--------------------------------------"]}},["-"]:{[ie.G.PLAIN]:(e,t)=>{const a=this.generatedLeftParameter(e),r=this.generatedRightParameter(e);return["     // ciphertext - plaintext","     //--------------------------------------",`     const leftValue${t} = easyFhe.encrypt(${a}, publicKey);`,`     const rightValue${t} = ${r};`,`     const encResult${t} = easyFhe.Plain.sub(leftValue${t}.save(), rightValue${t});`,`     const result${t} = easyFhe.decrypt(encResult${t}.save(), secretKey);`,"     //--------------------------------------"]},[ie.G.CIPHER]:(e,t)=>{const a=this.generatedLeftParameter(e),r=this.generatedRightParameter(e);return["     // ciphertext - ciphertext","     //--------------------------------------",`     const leftValue${t} = easyFhe.encrypt(${a}, publicKey);`,`     const rightValue${t} = easyFhe.encrypt(${r}, publicKey);`,`     const encResult${t} = easyFhe.Cipher.sub(leftValue${t}.save(), rightValue${t}.save());`,`     const result${t} = easyFhe.decrypt(encResult${t}.save(), secretKey);`,"     //--------------------------------------"]}},["*"]:{[ie.G.PLAIN]:(e,t)=>{const a=this.generatedLeftParameter(e),r=this.generatedRightParameter(e);return["     // ciphertext * plaintext","     //--------------------------------------",`     const leftValue${t} = easyFhe.encrypt(${a}, publicKey);`,`     const rightValue${t} = ${r};`,`     const encResult${t} = easyFhe.Plain.multiply(leftValue${t}.save(), rightValue${t});`,`     const result${t} = easyFhe.decrypt(encResult${t}.save(), secretKey);`,"     //--------------------------------------"]},[ie.G.CIPHER]:(e,t)=>{const a=this.generatedLeftParameter(e),r=this.generatedRightParameter(e);return["     // ciphertext * ciphertext","     //--------------------------------------",`     const leftValue${t} = easyFhe.encrypt(${a}, publicKey);`,`     const rightValue${t} = easyFhe.encrypt(${r}, publicKey);`,`     const encResult${t} = easyFhe.Cipher.multiply(leftValue${t}.save(), rightValue${t}.save());`,`     const result${t} = easyFhe.decrypt(encResult${t}.save(), secretKey);`,"     //--------------------------------------"]}}}},[`${p.Px.BGV}`]:{[ie.G.PLAIN]:{["+"]:{[ie.G.PLAIN]:(e,t)=>{const a=this.generatedLeftParameter(e),r=this.generatedRightParameter(e);return["     // plaintext + plaintext","     //--------------------------------------",`     const leftValue${t} = ${a};`,`     const rightValue${t} = ${r};`,`     const maxSize${t} =`,`       leftValue${t}.length > rightValue${t}.length ? leftValue${t}.length : rightValue${t}.length;`,`     const result${t} = Int32Array.from(new Array(maxSize${t}).fill(0));`,`     for (let i = 0; i < result${t}.length; i++) {`,`       result${t}[i] = leftValue${t}[i] + rightValue${t}[i];`,"     }","     //--------------------------------------"]},[ie.G.CIPHER]:(e,t)=>{const a=this.generatedLeftParameter(e),r=this.generatedRightParameter(e);return["     // plaintext + ciphertext","     //--------------------------------------",`     const leftValue${t} = ${a};`,`     const rightValue${t} = easyFhe.encrypt(${r}, publicKey);`,`     const encResult${t} = easyFhe.Plain.add(rightValue${t}.save(), leftValue${t});`,`     const result${t} = easyFhe.decrypt(encResult${t}.save(), secretKey);`,"     //--------------------------------------"]}},["-"]:{[ie.G.PLAIN]:(e,t)=>{const a=this.generatedLeftParameter(e),r=this.generatedRightParameter(e);return["     // plaintext - plaintext","     //--------------------------------------",`     const leftValue${t} = ${a};`,`     const rightValue${t} = ${r};`,`     const maxSize${t} =`,`       leftValue${t}.length > rightValue${t}.length ? leftValue${t}.length : rightValue${t}.length;`,`     const result${t} = Int32Array.from(new Array(maxSize${t}).fill(0));`,`     for (let i = 0; i < result${t}.length; i++) {`,`       result${t}[i] = leftValue${t}[i] - rightValue${t}[i];`,"     }","     //--------------------------------------"]},[ie.G.CIPHER]:(e,t)=>{const a=this.generatedLeftParameter(e),r=this.generatedRightParameter(e);return["     // plaintext - ciphertext","     //--------------------------------------",`     const leftValue${t} = ${a};`,`     const rightValue${t} = easyFhe.encrypt(${r}, publicKey);`,`     const encResult${t} = easyFhe.Plain.sub(rightValue${t}.save(), leftValue${t});`,`     const result${t} = easyFhe.decrypt(encResult${t}.save(), secretKey);`,"     //--------------------------------------"]}},["*"]:{[ie.G.PLAIN]:(e,t)=>{const a=this.generatedLeftParameter(e),r=this.generatedRightParameter(e);return["     // plaintext * plaintext","     //--------------------------------------",`     const leftValue${t} = ${a};`,`     const rightValue${t} = ${r};`,`     const maxSize${t} =`,`       leftValue${t}.length > rightValue${t}.length ? leftValue${t}.length : rightValue${t}.length;`,`     const result${t} = Int32Array.from(new Array(maxSize${t}).fill(0));`,`     for (let i = 0; i < result${t}.length; i++) {`,`       result${t}[i] = leftValue${t}[i] * rightValue${t}[i];`,"     }","     //--------------------------------------"]},[ie.G.CIPHER]:(e,t)=>{const a=this.generatedLeftParameter(e),r=this.generatedRightParameter(e);return["     // plaintext * ciphertext","     //--------------------------------------",`     const leftValue${t} = ${a};`,`     const rightValue${t} = easyFhe.encrypt(${r}, publicKey);`,`     const encResult${t} = easyFhe.Plain.multiply(rightValue${t}.save(), leftValue${t});`,`     const result${t} = easyFhe.decrypt(encResult${t}.save(), secretKey);`,"     //--------------------------------------"]}}},[ie.G.CIPHER]:{["+"]:{[ie.G.PLAIN]:(e,t)=>{const a=this.generatedLeftParameter(e),r=this.generatedRightParameter(e);return["     // ciphertext + plaintext","     //--------------------------------------",`     const leftValue${t} = easyFhe.encrypt(${a}, publicKey);`,`     const rightValue${t} = ${r};`,`     const encResult${t} = easyFhe.Plain.add(leftValue${t}.save(), rightValue${t});`,`     const result${t} = easyFhe.decrypt(encResult${t}.save(), secretKey);`,"     //--------------------------------------"]},[ie.G.CIPHER]:(e,t)=>{const a=this.generatedLeftParameter(e),r=this.generatedRightParameter(e);return["     // ciphertext + ciphertext","     //--------------------------------------",`     const leftValue${t} = easyFhe.encrypt(${a}, publicKey);`,`     const rightValue${t} = easyFhe.encrypt(${r}, publicKey);`,`     const encResult${t} = easyFhe.Cipher.add(leftValue${t}.save(), rightValue${t}.save());`,`     const result${t} = easyFhe.decrypt(encResult${t}.save(), secretKey);`,"     //--------------------------------------"]}},["-"]:{[ie.G.PLAIN]:(e,t)=>{const a=this.generatedLeftParameter(e),r=this.generatedRightParameter(e);return["     // ciphertext - plaintext","     //--------------------------------------",`     const leftValue${t} = easyFhe.encrypt(${a}, publicKey);`,`     const rightValue${t} = ${r};`,`     const encResult${t} = easyFhe.Plain.sub(leftValue${t}.save(), rightValue${t});`,`     const result${t} = easyFhe.decrypt(encResult${t}.save(), secretKey);`,"     //--------------------------------------"]},[ie.G.CIPHER]:(e,t)=>{const a=this.generatedLeftParameter(e),r=this.generatedRightParameter(e);return["     // ciphertext - ciphertext","     //--------------------------------------",`     const leftValue${t} = easyFhe.encrypt(${a}, publicKey);`,`     const rightValue${t} = easyFhe.encrypt(${r}, publicKey);`,`     const encResult${t} = easyFhe.Cipher.sub(leftValue${t}.save(), rightValue${t}.save());`,`     const result${t} = easyFhe.decrypt(encResult${t}.save(), secretKey);`,"     //--------------------------------------"]}},["*"]:{[ie.G.PLAIN]:(e,t)=>{const a=this.generatedLeftParameter(e),r=this.generatedRightParameter(e);return["     // ciphertext * plaintext","     //--------------------------------------",`     const leftValue${t} = easyFhe.encrypt(${a}, publicKey);`,`     const rightValue${t} = ${r};`,`     const encResult${t} = easyFhe.Plain.multiply(leftValue${t}.save(), rightValue${t});`,`     const result${t} = easyFhe.decrypt(encResult${t}.save(), secretKey);`,"     //--------------------------------------"]},[ie.G.CIPHER]:(e,t)=>{const a=this.generatedLeftParameter(e),r=this.generatedRightParameter(e);return["     // ciphertext * ciphertext","     //--------------------------------------",`     const leftValue${t} = easyFhe.encrypt(${a}, publicKey);`,`     const rightValue${t} = easyFhe.encrypt(${r}, publicKey);`,`     const encResult${t} = easyFhe.Cipher.multiply(leftValue${t}.save(), rightValue${t}.save());`,`     const result${t} = easyFhe.decrypt(encResult${t}.save(), secretKey);`,"     //--------------------------------------"]}}}},[`${p.Px.CKKS}`]:{[ie.G.PLAIN]:{["+"]:{[ie.G.PLAIN]:(e,t)=>{const a=this.generatedLeftParameter(e),r=this.generatedRightParameter(e);return["     // plaintext + plaintext","     //--------------------------------------",`     const leftValue${t} = ${a};`,`     const rightValue${t} = ${r};`,`     const maxSize${t} =`,`       leftValue${t}.length > rightValue${t}.length ? leftValue${t}.length : rightValue${t}.length;`,`     const result${t} = Float64Array.from(new Array(maxSize${t}).fill(0));`,`     for (let i = 0; i < result${t}.length; i++) {`,`       result${t}[i] = leftValue${t}[i] + rightValue${t}[i];`,"     }","     //--------------------------------------"]},[ie.G.CIPHER]:(e,t)=>{const a=this.generatedLeftParameter(e),r=this.generatedRightParameter(e);return["     // plaintext + ciphertext","     //--------------------------------------",`     const leftValue${t} = ${a};`,`     const rightValue${t} = easyFhe.encrypt(${r}, publicKey);`,`     const encResult${t} = easyFhe.Plain.add(rightValue${t}.save(), leftValue${t});`,`     const result${t} = easyFhe.decrypt(encResult${t}.save(), secretKey);`,"     //--------------------------------------"]}},["-"]:{[ie.G.PLAIN]:(e,t)=>{const a=this.generatedLeftParameter(e),r=this.generatedRightParameter(e);return["     // plaintext - plaintext","     //--------------------------------------",`     const leftValue${t} = ${a};`,`     const rightValue${t} = ${r};`,`     const maxSize${t} =`,`       leftValue${t}.length > rightValue${t}.length ? leftValue${t}.length : rightValue${t}.length;`,`     const result${t} = Float64Array.from(new Array(maxSize${t}).fill(0));`,`     for (let i = 0; i < result${t}.length; i++) {`,`       result${t}[i] = leftValue${t}[i] - rightValue${t}[i];`,"     }","     //--------------------------------------"]},[ie.G.CIPHER]:(e,t)=>{const a=this.generatedLeftParameter(e),r=this.generatedRightParameter(e);return["     // plaintext - ciphertext","     //--------------------------------------",`     const leftValue${t} = ${a};`,`     const rightValue${t} = easyFhe.encrypt(${r}, publicKey);`,`     const encResult${t} = easyFhe.Plain.sub(rightValue${t}.save(), leftValue${t});`,`     const result${t} = easyFhe.decrypt(encResult${t}.save(), secretKey);`,"     //--------------------------------------"]}},["*"]:{[ie.G.PLAIN]:(e,t)=>{const a=this.generatedLeftParameter(e),r=this.generatedRightParameter(e);return["     // plaintext * plaintext","     //--------------------------------------",`     const leftValue${t} = ${a};`,`     const rightValue${t} = ${r};`,`     const maxSize${t} =`,`       leftValue${t}.length > rightValue${t}.length ? leftValue${t}.length : rightValue${t}.length;`,`     const result${t} = Float64Array.from(new Array(maxSize${t}).fill(0));`,`     for (let i = 0; i < result${t}.length; i++) {`,`       result${t}[i] = leftValue${t}[i] * rightValue${t}[i];`,"     }","     //--------------------------------------"]},[ie.G.CIPHER]:(e,t)=>{const a=this.generatedLeftParameter(e),r=this.generatedRightParameter(e);return["     // plaintext * ciphertext","     //--------------------------------------",`     const leftValue${t} = ${a};`,`     const rightValue${t} = easyFhe.encrypt(${r}, publicKey);`,`     const encResult${t} = easyFhe.Plain.multiply(rightValue${t}.save(), leftValue${t});`,`     const result${t} = easyFhe.decrypt(encResult${t}.save(), secretKey);`,"     //--------------------------------------"]}}},[ie.G.CIPHER]:{["+"]:{[ie.G.PLAIN]:(e,t)=>{const a=this.generatedLeftParameter(e),r=this.generatedRightParameter(e);return["     // ciphertext + plaintext","     //--------------------------------------",`     const leftValue${t} = easyFhe.encrypt(${a}, publicKey);`,`     const rightValue${t} = ${r};`,`     const encResult${t} = easyFhe.Plain.add(leftValue${t}.save(), rightValue${t});`,`     const result${t} = easyFhe.decrypt(encResult${t}.save(), secretKey);`,"     //--------------------------------------"]},[ie.G.CIPHER]:(e,t)=>{const a=this.generatedLeftParameter(e),r=this.generatedRightParameter(e);return["     // ciphertext + ciphertext","     //--------------------------------------",`     const leftValue${t} = easyFhe.encrypt(${a}, publicKey);`,`     const rightValue${t} = easyFhe.encrypt(${r}, publicKey);`,`     const encResult${t} = easyFhe.Cipher.add(leftValue${t}.save(), rightValue${t}.save());`,`     const result${t} = easyFhe.decrypt(encResult${t}.save(), secretKey);`,"     //--------------------------------------"]}},["-"]:{[ie.G.PLAIN]:(e,t)=>{const a=this.generatedLeftParameter(e),r=this.generatedRightParameter(e);return["     // ciphertext - plaintext","     //--------------------------------------",`     const leftValue${t} = easyFhe.encrypt(${a}, publicKey);`,`     const rightValue${t} = ${r};`,`     const encResult${t} = easyFhe.Plain.sub(leftValue${t}.save(), rightValue${t});`,`     const result${t} = easyFhe.decrypt(encResult${t}.save(), secretKey);`,"     //--------------------------------------"]},[ie.G.CIPHER]:(e,t)=>{const a=this.generatedLeftParameter(e),r=this.generatedRightParameter(e);return["     // ciphertext - ciphertext","     //--------------------------------------",`     const leftValue${t} = easyFhe.encrypt(${a}, publicKey);`,`     const rightValue${t} = easyFhe.encrypt(${r}, publicKey);`,`     const encResult${t} = easyFhe.Cipher.sub(leftValue${t}.save(), rightValue${t}.save());`,`     const result${t} = easyFhe.decrypt(encResult${t}.save(), secretKey);`,"     //--------------------------------------"]}},["*"]:{[ie.G.PLAIN]:(e,t)=>{const a=this.generatedLeftParameter(e),r=this.generatedRightParameter(e);return["     // ciphertext * plaintext","     //--------------------------------------",`     const leftValue${t} = easyFhe.encrypt(${a}, publicKey);`,`     const rightValue${t} = ${r};`,`     const encResult${t} = easyFhe.Plain.multiply(leftValue${t}.save(), rightValue${t});`,`     const result${t} = easyFhe.decrypt(encResult${t}.save(), secretKey);`,"     //--------------------------------------"]},[ie.G.CIPHER]:(e,t)=>{const a=this.generatedLeftParameter(e),r=this.generatedRightParameter(e);return["     // ciphertext * ciphertext","     //--------------------------------------",`     const leftValue${t} = easyFhe.encrypt(${a}, publicKey);`,`     const rightValue${t} = easyFhe.encrypt(${r}, publicKey);`,`     const encResult${t} = easyFhe.Cipher.multiply(leftValue${t}.save(), rightValue${t}.save());`,`     const result${t} = easyFhe.decrypt(encResult${t}.save(), secretKey);`,"     //--------------------------------------"]}}}}}}}}),Me=(0,r.aZ)({components:{},mixins:[ne],props:{scheme:{type:Object,required:!0}},setup(){return{ValueType:ie.G}},methods:{generatedLeftParameter(e){const t=Array.from(e.leftSide.value.split(","),(e=>Number.parseInt(e))).filter((e=>!Number.isNaN(e))),a=Array.from(e.leftSide.value.split(","),(e=>Number.parseFloat(e))).filter((e=>!Number.isNaN(e)));switch(this.scheme.scheme.value){case p.Px.BFV:case p.Px.BGV:return`Int32Array.from([${t.toString()}])`;case p.Px.CKKS:return`Float64Array.from([${a.toString()}])`;default:return`Int32Array.from([${t.toString()}])`}},generatedRightParameter(e){const t=Array.from(e.rightSide.value.split(","),(e=>Number.parseInt(e))).filter((e=>!Number.isNaN(e))),a=Array.from(e.rightSide.value.split(","),(e=>Number.parseFloat(e))).filter((e=>!Number.isNaN(e)));switch(this.scheme.scheme.value){case p.Px.BFV:case p.Px.BGV:return`Int32Array.from([${t.toString()}])`;case p.Px.CKKS:return`Float64Array.from([${a.toString()}])`;default:return`Int32Array.from([${t.toString()}])`}}},computed:{computedSealScheme(){return{[p.Px.NONE]:"EasyScheme.NONE",[p.Px.BFV]:"EasyScheme.BFV",[p.Px.BGV]:"EasyScheme.BGV",[p.Px.CKKS]:"EasyScheme.CKKS"}},computedSealSecurity(){return{[p.qg.TC128]:"EasySecurity.TC128",[p.qg.TC192]:"EasySecurity.TC192",[p.qg.TC256]:"EasySecurity.TC256"}},computedSealSpeed(){return{[p.Nk.VERY_FAST]:{polyModulusDegree:1024,bitSizes:"[14]",bitSize:20},[p.Nk.FAST]:{polyModulusDegree:2048,bitSizes:"[29]",bitSize:20},[p.Nk.NORMAL]:{polyModulusDegree:4096,bitSizes:"[58]",bitSize:20},[p.Nk.SLOW]:{polyModulusDegree:8192,bitSizes:"[39, 39, 40]",bitSize:20},[p.Nk.VERY_SLOW]:{polyModulusDegree:16384,bitSizes:"[47, 47, 47, 48, 48]",bitSize:20}}},computedSealPrecision(){return{[p.Hr.LOW]:"Math.pow(2, 10)",[p.Hr.NORMAL]:"Math.pow(2, 20)",[p.Hr.HIGH]:"Math.pow(2, 30)"}},nodeSealSetupHeader(){switch(this.scheme.scheme.value){case p.Px.BFV:case p.Px.BGV:return{code:["<script lang='ts'>","","import SEAL from 'node-seal';","","(async () => {","    // Wait for the web assembly to fully initialize","    const seal = await SEAL();","","     ////////////////////////","     // Encryption Parameters","     ////////////////////////","     // Create a new EncryptionParameters",`    const schemeType = seal.SchemeType.${this.scheme.scheme.value}`,`    const securityLevel = seal.SecurityLevel.${this.scheme.security.value}`,`    const polyModulusDegree = ${this.computedSealSpeed[this.scheme.speed.value].polyModulusDegree};`,`    const bitSizes = ${this.computedSealSpeed[this.scheme.speed.value].bitSizes};`,`    const bitSize = ${this.computedSealSpeed[this.scheme.speed.value].bitSize};`,"","    // Set the PolyModulusDegree","    const parms = seal.EncryptionParameters(schemeType);","","    // Create a suitable set of CoeffModulus primes","    parms.setCoeffModulus(","         seal.CoeffModulus.Create(polyModulusDegree, Int32Array.from(bitSizes))","    );","","    // Set the PlainModulus to a prime of bitSize 20.","    parms.setPlainModulus(","      seal.PlainModulus.Batching(polyModulusDegree, bitSize)","    );","","    const context = seal.Context(","      parms, // Encryption Parameters","      true, // ExpandModChain","      securityLevel // Enforce a security level","    );","","    if (!context.parametersSet()) {","      throw new Error(","        'Could not set the parameters in the given context. Please try different encryption parameters.'","      );","    }","","    const keyGenerator = seal.KeyGenerator(context);","    const publicKey = keyGenerator.createPublicKey();","    const secretKey = keyGenerator.secretKey()","","","","","    secretKey.delete();","    publicKey.delete();","    keyGenerator.delete();","    parms.delete();","    context.delete();","})()","","</style>"],atIndexToInsert:47};case p.Px.CKKS:return{code:["<script lang='ts'>","","import SEAL from 'node-seal';","","(async () => {","    // Wait for the web assembly to fully initialize","    const seal = await SEAL();","","     ////////////////////////","     // Encryption Parameters","     ////////////////////////","     // Create a new EncryptionParameters",`    const schemeType = seal.SchemeType.${this.scheme.scheme.value}`,`    const securityLevel = seal.SecurityLevel.${this.scheme.security.value}`,`    const polyModulusDegree = ${this.computedSealSpeed[this.scheme.speed.value].polyModulusDegree};`,`    const bitSizes = ${this.computedSealSpeed[this.scheme.speed.value].bitSizes};`,"","    // Set the PolyModulusDegree","    const parms = seal.EncryptionParameters(schemeType);","","    // Create a suitable set of CoeffModulus primes","    parms.setCoeffModulus(","         seal.CoeffModulus.Create(polyModulusDegree, Int32Array.from(bitSizes))","    );","","    const context = seal.Context(","      parms, // Encryption Parameters","      true, // ExpandModChain","      securityLevel // Enforce a security level","    );","","    if (!context.parametersSet()) {","      throw new Error(","        'Could not set the parameters in the given context. Please try different encryption parameters.'","      );","    }","","    const keyGenerator = seal.KeyGenerator(context);","    const publicKey = keyGenerator.createPublicKey();","    const secretKey = keyGenerator.secretKey()","","","    secretKey.delete();","    publicKey.delete();","    keyGenerator.delete();","    parms.delete();","    context.delete();","})()","","</style>"],atIndexToInsert:41};default:return{code:["<script lang='ts'>","","import SEAL from 'node-seal';","","(async () => {","    // Wait for the web assembly to fully initialize","    const seal = await SEAL();","","     ////////////////////////","     // Encryption Parameters","     ////////////////////////","     // Create a new EncryptionParameters",`    const schemeType = seal.SchemeType.${this.scheme.scheme.value}`,`    const securityLevel = seal.SecurityLevel.${this.scheme.security.value}`,`    const polyModulusDegree = ${this.computedSealSpeed[this.scheme.speed.value].polyModulusDegree};`,`    const bitSizes = ${this.computedSealSpeed[this.scheme.speed.value].bitSizes};`,`    const bitSize = ${this.computedSealSpeed[this.scheme.speed.value].bitSize};`,"","    // Set the PolyModulusDegree","    const parms = seal.EncryptionParameters(schemeType);","","    // Create a suitable set of CoeffModulus primes","    parms.setCoeffModulus(","         seal.CoeffModulus.Create(polyModulusDegree, Int32Array.from(bitSizes))","    );","","    // Set the PlainModulus to a prime of bitSize 20.","    parms.setPlainModulus(","      seal.PlainModulus.Batching(polyModulusDegree, bitSize)","    );","","    const context = seal.Context(","      parms, // Encryption Parameters","      true, // ExpandModChain","      securityLevel // Enforce a security level","    );","","    if (!context.parametersSet()) {","      throw new Error(","        'Could not set the parameters in the given context. Please try different encryption parameters.'","      );","    }","","    const keyGenerator = seal.KeyGenerator(context);","    const publicKey = keyGenerator.createPublicKey();","    const secretKey = keyGenerator.secretKey()","","","})()","","</style>"],atIndexToInsert:47}}},nodeSealCodeMap(){const e=this.scheme.precision.value;return{[`${p.Px.BFV}`]:{[ie.G.PLAIN]:{["+"]:{[ie.G.PLAIN]:(e,t)=>{const a=this.generatedLeftParameter(e),r=this.generatedRightParameter(e);return["     // plaintext + plaintext","     //--------------------------------------",`     const leftValue${t} = ${a};`,`     const rightValue${t} = ${r};`,`     const maxSize${t} =`,`       leftValue${t}.length > rightValue${t}.length ? leftValue${t}.length : rightValue${t}.length;`,`     const result${t} = Int32Array.from(new Array(maxSize${t}).fill(0));`,`     for (let i = 0; i < result${t}.length; i++) {`,`       result${t}[i] = leftValue${t}[i] + rightValue${t}[i];`,"     }","     //--------------------------------------"]},[ie.G.CIPHER]:(e,t)=>{const a=this.generatedLeftParameter(e),r=this.generatedRightParameter(e);return["    // plaintext + ciphertext","    //--------------------------------------","    // create an Encoder and encode the parameters",`    const encoder${t} = seal.BatchEncoder(context);`,`    const leftValue${t} = ${a}`,`    const eLeftValue${t} = encoder${t}.encode(leftValue${t}) as PlainText;`,`    const rightValue${t} = ${r};`,`    const eRightValue${t} = encoder${t}.encode(rightValue${t}) as PlainText;`,"    //create an Encryptor to encrypt the parameter(s)",`    const encryptor${t} = seal.Encryptor(context, publicKey);`,`    const enRightValue${t} = encryptor${t}.encrypt(eRightValue${t}) as CipherText;`,"    //create an Evaluator",`    const evaluator${t} = seal.Evaluator(context);`,"    // perform the operation",`    const enResult${t} = evaluator${t}.addPlain(`,`      enRightValue${t},`,`      eLeftValue${t}`,"    ) as CipherText;","    //create a Decryptor and decrypt the result",`    const decryptor${t} = seal.Decryptor(context, secretKey);`,`    const decoResult${t} = decryptor${t}.decrypt(enResult${t}) as PlainText;`,`    const result${t} = encoder${t}.decode(decoResult${t});`,"    //deallocate all the objects resulted",`    eRightValue${t}.delete();`,`    encoder${t}.delete();`,`    decryptor${t}.delete();`,`    evaluator${t}.delete();`,`    eLeftValue${t}.delete();`,`    enRightValue${t}.delete();`,`    encryptor${t}.delete();`,"    //--------------------------------------"]}},["-"]:{[ie.G.PLAIN]:(e,t)=>{const a=this.generatedLeftParameter(e),r=this.generatedRightParameter(e);return["     // plaintext - plaintext","     //--------------------------------------",`     const leftValue${t} = ${a};`,`     const rightValue${t} = ${r};`,`     const maxSize${t} =`,`       leftValue${t}.length > rightValue${t}.length ? leftValue${t}.length : rightValue${t}.length;`,`     const result${t} = Int32Array.from(new Array(maxSize${t}).fill(0));`,`     for (let i = 0; i < result${t}.length; i++) {`,`       result${t}[i] = leftValue${t}[i] - rightValue${t}[i];`,"     }","     //--------------------------------------"]},[ie.G.CIPHER]:(e,t)=>{const a=this.generatedLeftParameter(e),r=this.generatedRightParameter(e);return["    // plaintext - ciphertext","    //--------------------------------------","    // create an Encoder and encode the parameters",`    const encoder${t} = seal.BatchEncoder(context);`,`    const leftValue${t} = ${a}`,`    const eLeftValue${t} = encoder${t}.encode(leftValue${t}) as PlainText;`,`    const rightValue${t} = ${r};`,`    const eRightValue${t} = encoder${t}.encode(rightValue${t}) as PlainText;`,"    //create an Encryptor to encrypt the parameter(s)",`    const encryptor${t} = seal.Encryptor(context, publicKey);`,`    const enRightValue${t} = encryptor${t}.encrypt(eRightValue${t}) as CipherText;`,"    //create an Evaluator",`    const evaluator${t} = seal.Evaluator(context);`,"    // perform the operation",`    const enResult${t} = evaluator${t}.subPlain(`,`      enRightValue${t},`,`      eLeftValue${t}`,"    ) as CipherText;","    //create a Decryptor and decrypt the result",`    const decryptor${t} = seal.Decryptor(context, secretKey);`,`    const decoResult${t} = decryptor${t}.decrypt(enResult${t}) as PlainText;`,`    const result${t} = encoder${t}.decode(decoResult${t});`,"    //deallocate all the objects resulted",`    eRightValue${t}.delete();`,`    encoder${t}.delete();`,`    decryptor${t}.delete();`,`    evaluator${t}.delete();`,`    eLeftValue${t}.delete();`,`    enRightValue${t}.delete();`,`    encryptor${t}.delete();`,"    //--------------------------------------"]}},["*"]:{[ie.G.PLAIN]:(e,t)=>{const a=this.generatedLeftParameter(e),r=this.generatedRightParameter(e);return["     // plaintext * plaintext","     //--------------------------------------",`     const leftValue${t} = ${a};`,`     const rightValue${t} = ${r};`,`     const maxSize${t} =`,`       leftValue${t}.length > rightValue${t}.length ? leftValue${t}.length : rightValue${t}.length;`,`     const result${t} = Int32Array.from(new Array(maxSize${t}).fill(0));`,`     for (let i = 0; i < result${t}.length; i++) {`,`       result${t}[i] = leftValue${t}[i] * rightValue${t}[i];`,"     }","     //--------------------------------------"]},[ie.G.CIPHER]:(e,t)=>{const a=this.generatedLeftParameter(e),r=this.generatedRightParameter(e);return["    // plaintext - ciphertext","    //--------------------------------------","    // create an Encoder and encode the parameters",`    const encoder${t} = seal.BatchEncoder(context);`,`    const leftValue${t} = ${a}`,`    const eLeftValue${t} = encoder${t}.encode(leftValue${t}) as PlainText;`,`    const rightValue${t} = ${r};`,`    const eRightValue${t} = encoder${t}.encode(rightValue${t}) as PlainText;`,"    //create an Encryptor to encrypt the parameter(s)",`    const encryptor${t} = seal.Encryptor(context, publicKey);`,`    const enRightValue${t} = encryptor${t}.encrypt(eRightValue${t}) as CipherText;`,"    //create an Evaluator",`    const evaluator${t} = seal.Evaluator(context);`,"    // perform the operation",`    const enResult${t} = evaluator${t}.multiplyPlain(`,`      enRightValue${t},`,`      eLeftValue${t}`,"    ) as CipherText;","    //create a Decryptor and decrypt the result",`    const decryptor${t} = seal.Decryptor(context, secretKey);`,`    const decoResult${t} = decryptor${t}.decrypt(enResult${t}) as PlainText;`,`    const result${t} = encoder${t}.decode(decoResult${t});`,"    //deallocate all the objects resulted",`    eRightValue${t}.delete();`,`    encoder${t}.delete();`,`    decryptor${t}.delete();`,`    evaluator${t}.delete();`,`    eLeftValue${t}.delete();`,`    enRightValue${t}.delete();`,`    encryptor${t}.delete();`,"    //--------------------------------------"]}}},[ie.G.CIPHER]:{["+"]:{[ie.G.PLAIN]:(e,t)=>{const a=this.generatedLeftParameter(e),r=this.generatedRightParameter(e);return["\t   // ciphertext + plaintext","    //--------------------------------------","    // create an Encoder and encode the parameters",`    const encoder${t} = seal.BatchEncoder(context);`,`    const leftValue${t} = ${a};`,`    const eLeftValue${t} = encoder${t}.encode(leftValue${t}) as PlainText;`,`    const rightValue${t} = ${r};`,`    const eRightValue${t} = encoder${t}.encode(rightValue${t}) as PlainText;`,"    //create an Encryptor to encrypt the parameter(s)",`    const encryptor${t} = seal.Encryptor(context, publicKey);`,`    const enLeftValue${t} = encryptor${t}.encrypt(eLeftValue${t}) as CipherText;`,"    //create an Evaluator",`    const evaluator${t} = seal.Evaluator(context);`,"    // perform the operation",`    const enResult${t} = evaluator${t}.addPlain(`,`      enLeftValue${t},`,`      eRightValue${t}`,"    ) as CipherText;","    //create a Decryptor and decrypt the result",`    const decryptor${t} = seal.Decryptor(context, secretKey);`,`    const decoResult${t} = decryptor${t}.decrypt(enResult${t}) as PlainText;`,`    const result${t} = encoder${t}.decode(decoResult${t});`,"    //deallocate all the objects resulted",`    eRightValue${t}.delete();`,`    encoder${t}.delete();`,`    decryptor${t}.delete();`,`    evaluator${t}.delete();`,`    eLeftValue${t}.delete();`,`    enLeftValue${t}.delete();`,`    encryptor${t}.delete();`,"    //--------------------------------------"]},[ie.G.CIPHER]:(e,t)=>{const a=this.generatedLeftParameter(e),r=this.generatedRightParameter(e);return["    // ciphertext + ciphertext","    //--------------------------------------","    // create an Encoder and encode the parameters",`    const encoder${t} = seal.BatchEncoder(context);`,`    const leftValue${t} = ${r};`,`    const eLeftValue${t} = encoder${t}.encode(leftValue${t}) as PlainText;`,`    const rightValue${t} = ${a};`,`    const eRightValue${t} = encoder${t}.encode(rightValue${t}) as PlainText;`,"    //create an Encryptor to encrypt the parameter(s)",`    const encryptor${t} = seal.Encryptor(context, publicKey);`,`    const enLeftValue${t} = encryptor${t}.encrypt(eLeftValue${t}) as CipherText;`,`    const enRightValue${t} = encryptor${t}.encrypt(eRightValue${t}) as CipherText;`,"    //create an Evaluator",`    const evaluator${t} = seal.Evaluator(context);`,"    // perform the operation",`    const enResult${t} = evaluator${t}.add(enLeftValue${t}, enRightValue${t}) as CipherText;`,"    //create a Decryptor and decrypt the result",`    const decryptor${t} = seal.Decryptor(context, secretKey);`,`    const decoResult${t} = decryptor${t}.decrypt(enResult${t}) as PlainText;`,`    const result${t} = encoder${t}.decode(decoResult${t});`,"    //deallocate all the objects resulted",`    eRightValue${t}.delete();`,`    encoder${t}.delete();`,`    decryptor${t}.delete();`,`    evaluator${t}.delete();`,`    eLeftValue${t}.delete();`,`    enLeftValue${t}.delete();`,`    encryptor${t}.delete();`,"    //--------------------------------------"]}},["-"]:{[ie.G.PLAIN]:(e,t)=>{const a=this.generatedLeftParameter(e),r=this.generatedRightParameter(e);return["\t   // ciphertext - plaintext","    //--------------------------------------","    // create an Encoder and encode the parameters",`    const encoder${t} = seal.BatchEncoder(context);`,`    const leftValue${t} = ${a};`,`    const eLeftValue${t} = encoder${t}.encode(leftValue${t}) as PlainText;`,`    const rightValue${t} = ${r};`,`    const eRightValue${t} = encoder${t}.encode(rightValue${t}) as PlainText;`,"    //create an Encryptor to encrypt the parameter(s)",`    const encryptor${t} = seal.Encryptor(context, publicKey);`,`    const enLeftValue${t} = encryptor${t}.encrypt(eLeftValue${t}) as CipherText;`,"    //create an Evaluator",`    const evaluator${t} = seal.Evaluator(context);`,"    // perform the operation",`    const enResult${t} = evaluator${t}.subPlain(`,`      enLeftValue${t},`,`      eRightValue${t}`,"    ) as CipherText;","    //create a Decryptor and decrypt the result",`    const decryptor${t} = seal.Decryptor(context, secretKey);`,`    const decoResult${t} = decryptor${t}.decrypt(enResult${t}) as PlainText;`,`    const result${t} = encoder${t}.decode(decoResult${t});`,"    //deallocate all the objects resulted",`    eRightValue${t}.delete();`,`    encoder${t}.delete();`,`    decryptor${t}.delete();`,`    evaluator${t}.delete();`,`    eLeftValue${t}.delete();`,`    enLeftValue${t}.delete();`,`    encryptor${t}.delete();`,"    //--------------------------------------"]},[ie.G.CIPHER]:(e,t)=>{const a=this.generatedLeftParameter(e),r=this.generatedRightParameter(e);return["    // ciphertext - ciphertext","    //--------------------------------------","    // create an Encoder and encode the parameters",`    const encoder${t} = seal.BatchEncoder(context);`,`    const leftValue${t} = ${r};`,`    const eLeftValue${t} = encoder${t}.encode(leftValue${t}) as PlainText;`,`    const rightValue${t} = ${a};`,`    const eRightValue${t} = encoder${t}.encode(rightValue${t}) as PlainText;`,"    //create an Encryptor to encrypt the parameter(s)",`    const encryptor${t} = seal.Encryptor(context, publicKey);`,`    const enLeftValue${t} = encryptor${t}.encrypt(eLeftValue${t}) as CipherText;`,`    const enRightValue${t} = encryptor${t}.encrypt(eRightValue${t}) as CipherText;`,"    //create an Evaluator",`    const evaluator${t} = seal.Evaluator(context);`,"    // perform the operation",`    const enResult${t} = evaluator${t}.sub(enLeftValue${t}, enRightValue${t}) as CipherText;`,"    //create a Decryptor and decrypt the result",`    const decryptor${t} = seal.Decryptor(context, secretKey);`,`    const decoResult${t} = decryptor${t}.decrypt(enResult${t}) as PlainText;`,`    const result${t} = encoder${t}.decode(decoResult${t});`,"    //deallocate all the objects resulted",`    eRightValue${t}.delete();`,`    encoder${t}.delete();`,`    decryptor${t}.delete();`,`    evaluator${t}.delete();`,`    eLeftValue${t}.delete();`,`    enLeftValue${t}.delete();`,`    encryptor${t}.delete();`,"    //--------------------------------------"]}},["*"]:{[ie.G.PLAIN]:(e,t)=>{const a=this.generatedLeftParameter(e),r=this.generatedRightParameter(e);return["\t   // ciphertext * plaintext","    //--------------------------------------","    // create an Encoder and encode the parameters",`    const encoder${t} = seal.BatchEncoder(context);`,`    const leftValue${t} = ${a};`,`    const eLeftValue${t} = encoder${t}.encode(leftValue${t}) as PlainText;`,`    const rightValue${t} = ${r};`,`    const eRightValue${t} = encoder${t}.encode(rightValue${t}) as PlainText;`,"    //create an Encryptor to encrypt the parameter(s)",`    const encryptor${t} = seal.Encryptor(context, publicKey);`,`    const enLeftValue${t} = encryptor${t}.encrypt(eLeftValue${t}) as CipherText;`,"    //create an Evaluator",`    const evaluator${t} = seal.Evaluator(context);`,"    // perform the operation",`    const enResult${t} = evaluator${t}.multiplyPlain(`,`      enLeftValue${t},`,`      eRightValue${t}`,"    ) as CipherText;","    //create a Decryptor and decrypt the result",`    const decryptor${t} = seal.Decryptor(context, secretKey);`,`    const decoResult${t} = decryptor${t}.decrypt(enResult${t}) as PlainText;`,`    const result${t} = encoder${t}.decode(decoResult${t});`,"    //deallocate all the objects resulted",`    eRightValue${t}.delete();`,`    encoder${t}.delete();`,`    decryptor${t}.delete();`,`    evaluator${t}.delete();`,`    eLeftValue${t}.delete();`,`    enLeftValue${t}.delete();`,`    encryptor${t}.delete();`,"    //--------------------------------------"]},[ie.G.CIPHER]:(e,t)=>{const a=this.generatedLeftParameter(e),r=this.generatedRightParameter(e);return["    // ciphertext * ciphertext","    //--------------------------------------","    // create an Encoder and encode the parameters",`    const encoder${t} = seal.BatchEncoder(context);`,`    const leftValue${t} = ${r};`,`    const eLeftValue${t} = encoder${t}.encode(leftValue${t}) as PlainText;`,`    const rightValue${t} = ${a};`,`    const eRightValue${t} = encoder${t}.encode(rightValue${t}) as PlainText;`,"    //create an Encryptor to encrypt the parameter(s)",`    const encryptor${t} = seal.Encryptor(context, publicKey);`,`    const enLeftValue${t} = encryptor${t}.encrypt(eLeftValue${t}) as CipherText;`,`    const enRightValue${t} = encryptor${t}.encrypt(eRightValue${t}) as CipherText;`,"    //create an Evaluator",`    const evaluator${t} = seal.Evaluator(context);`,"    // perform the operation",`    const enResult${t} = evaluator${t}.multiply(`,`      enLeftValue${t},`,`      enRightValue${t}`,"    ) as CipherText;","    //create a Decryptor and decrypt the result",`    const decryptor${t} = seal.Decryptor(context, secretKey);`,`    const decoResult${t} = decryptor${t}.decrypt(enResult${t}) as PlainText;`,`    const result${t} = encoder${t}.decode(decoResult${t});`,"    //deallocate all the objects resulted",`    eRightValue${t}.delete();`,`    encoder${t}.delete();`,`    decryptor${t}.delete();`,`    evaluator${t}.delete();`,`    eLeftValue${t}.delete();`,`    enLeftValue${t}.delete();`,`    encryptor${t}.delete();`,"    //--------------------------------------"]}}}},[`${p.Px.BGV}`]:{[ie.G.PLAIN]:{["+"]:{[ie.G.PLAIN]:(e,t)=>{const a=this.generatedLeftParameter(e),r=this.generatedRightParameter(e);return["     // plaintext + plaintext","     //--------------------------------------",`     const leftValue${t} = ${a};`,`     const rightValue${t} = ${r};`,`     const maxSize${t} =`,`       leftValue${t}.length > rightValue${t}.length ? leftValue${t}.length : rightValue${t}.length;`,`     const result${t} = Int32Array.from(new Array(maxSize${t}).fill(0));`,`     for (let i = 0; i < result${t}.length; i++) {`,`       result${t}[i] = leftValue${t}[i] + rightValue${t}[i];`,"     }","     //--------------------------------------"]},[ie.G.CIPHER]:(e,t)=>{const a=this.generatedLeftParameter(e),r=this.generatedRightParameter(e);return["    // plaintext + ciphertext","    //--------------------------------------","    // create an Encoder and encode the parameters",`    const encoder${t} = seal.BatchEncoder(context);`,`    const leftValue${t} = ${a}`,`    const eLeftValue${t} = encoder${t}.encode(leftValue${t}) as PlainText;`,`    const rightValue${t} = ${r};`,`    const eRightValue${t} = encoder${t}.encode(rightValue${t}) as PlainText;`,"    //create an Encryptor to encrypt the parameter(s)",`    const encryptor${t} = seal.Encryptor(context, publicKey);`,`    const enRightValue${t} = encryptor${t}.encrypt(eRightValue${t}) as CipherText;`,"    //create an Evaluator",`    const evaluator${t} = seal.Evaluator(context);`,"    // perform the operation",`    const enResult${t} = evaluator${t}.addPlain(`,`      enRightValue${t},`,`      eLeftValue${t}`,"    ) as CipherText;","    //create a Decryptor and decrypt the result",`    const decryptor${t} = seal.Decryptor(context, secretKey);`,`    const decoResult${t} = decryptor${t}.decrypt(enResult${t}) as PlainText;`,`    const result${t} = encoder${t}.decode(decoResult${t});`,"    //deallocate all the objects resulted",`    eRightValue${t}.delete();`,`    encoder${t}.delete();`,`    decryptor${t}.delete();`,`    evaluator${t}.delete();`,`    eLeftValue${t}.delete();`,`    enRightValue${t}.delete();`,`    encryptor${t}.delete();`,"    //--------------------------------------"]}},["-"]:{[ie.G.PLAIN]:(e,t)=>{const a=this.generatedLeftParameter(e),r=this.generatedRightParameter(e);return["     // plaintext - plaintext","     //--------------------------------------",`     const leftValue${t} = ${a};`,`     const rightValue${t} = ${r};`,`     const maxSize${t} =`,`       leftValue${t}.length > rightValue${t}.length ? leftValue${t}.length : rightValue${t}.length;`,`     const result${t} = Int32Array.from(new Array(maxSize${t}).fill(0));`,`     for (let i = 0; i < result${t}.length; i++) {`,`       result${t}[i] = leftValue${t}[i] - rightValue${t}[i];`,"     }","     //--------------------------------------"]},[ie.G.CIPHER]:(e,t)=>{const a=this.generatedLeftParameter(e),r=this.generatedRightParameter(e);return["    // plaintext - ciphertext","    //--------------------------------------","    // create an Encoder and encode the parameters",`    const encoder${t} = seal.BatchEncoder(context);`,`    const leftValue${t} = ${a}`,`    const eLeftValue${t} = encoder${t}.encode(leftValue${t}) as PlainText;`,`    const rightValue${t} = ${r};`,`    const eRightValue${t} = encoder${t}.encode(rightValue${t}) as PlainText;`,"    //create an Encryptor to encrypt the parameter(s)",`    const encryptor${t} = seal.Encryptor(context, publicKey);`,`    const enRightValue${t} = encryptor${t}.encrypt(eRightValue${t}) as CipherText;`,"    //create an Evaluator",`    const evaluator${t} = seal.Evaluator(context);`,"    // perform the operation",`    const enResult${t} = evaluator${t}.subPlain(`,`      enRightValue${t},`,`      eLeftValue${t}`,"    ) as CipherText;","    //create a Decryptor and decrypt the result",`    const decryptor${t} = seal.Decryptor(context, secretKey);`,`    const decoResult${t} = decryptor${t}.decrypt(enResult${t}) as PlainText;`,`    const result${t} = encoder${t}.decode(decoResult${t});`,"    //deallocate all the objects resulted",`    eRightValue${t}.delete();`,`    encoder${t}.delete();`,`    decryptor${t}.delete();`,`    evaluator${t}.delete();`,`    eLeftValue${t}.delete();`,`    enRightValue${t}.delete();`,`    encryptor${t}.delete();`,"    //--------------------------------------"]}},["*"]:{[ie.G.PLAIN]:(e,t)=>{const a=this.generatedLeftParameter(e),r=this.generatedRightParameter(e);return["     // plaintext * plaintext","     //--------------------------------------",`     const leftValue${t} = ${a};`,`     const rightValue${t} = ${r};`,`     const maxSize${t} =`,`       leftValue${t}.length > rightValue${t}.length ? leftValue${t}.length : rightValue${t}.length;`,`     const result${t} = Int32Array.from(new Array(maxSize${t}).fill(0));`,`     for (let i = 0; i < result${t}.length; i++) {`,`       result${t}[i] = leftValue${t}[i] * rightValue${t}[i];`,"     }","     //--------------------------------------"]},[ie.G.CIPHER]:(e,t)=>{const a=this.generatedLeftParameter(e),r=this.generatedRightParameter(e);return["    // plaintext - ciphertext","    //--------------------------------------","    // create an Encoder and encode the parameters",`    const encoder${t} = seal.BatchEncoder(context);`,`    const leftValue${t} = ${a}`,`    const eLeftValue${t} = encoder${t}.encode(leftValue${t}) as PlainText;`,`    const rightValue${t} = ${r};`,`    const eRightValue${t} = encoder${t}.encode(rightValue${t}) as PlainText;`,"    //create an Encryptor to encrypt the parameter(s)",`    const encryptor${t} = seal.Encryptor(context, publicKey);`,`    const enRightValue${t} = encryptor${t}.encrypt(eRightValue${t}) as CipherText;`,"    //create an Evaluator",`    const evaluator${t} = seal.Evaluator(context);`,"    // perform the operation",`    const enResult${t} = evaluator${t}.multiplyPlain(`,`      enRightValue${t},`,`      eLeftValue${t}`,"    ) as CipherText;","    //create a Decryptor and decrypt the result",`    const decryptor${t} = seal.Decryptor(context, secretKey);`,`    const decoResult${t} = decryptor${t}.decrypt(enResult${t}) as PlainText;`,`    const result${t} = encoder${t}.decode(decoResult${t});`,"    //deallocate all the objects resulted",`    eRightValue${t}.delete();`,`    encoder${t}.delete();`,`    decryptor${t}.delete();`,`    evaluator${t}.delete();`,`    eLeftValue${t}.delete();`,`    enRightValue${t}.delete();`,`    encryptor${t}.delete();`,"    //--------------------------------------"]}}},[ie.G.CIPHER]:{["+"]:{[ie.G.PLAIN]:(e,t)=>{const a=this.generatedLeftParameter(e),r=this.generatedRightParameter(e);return["\t   // ciphertext + plaintext","    //--------------------------------------","    // create an Encoder and encode the parameters",`    const encoder${t} = seal.BatchEncoder(context);`,`    const leftValue${t} = ${a};`,`    const eLeftValue${t} = encoder${t}.encode(leftValue${t}) as PlainText;`,`    const rightValue${t} = ${r};`,`    const eRightValue${t} = encoder${t}.encode(rightValue${t}) as PlainText;`,"    //create an Encryptor to encrypt the parameter(s)",`    const encryptor${t} = seal.Encryptor(context, publicKey);`,`    const enLeftValue${t} = encryptor${t}.encrypt(eLeftValue${t}) as CipherText;`,"    //create an Evaluator",`    const evaluator${t} = seal.Evaluator(context);`,"    // perform the operation",`    const enResult${t} = evaluator${t}.addPlain(`,`      enLeftValue${t},`,`      eRightValue${t}`,"    ) as CipherText;","    //create a Decryptor and decrypt the result",`    const decryptor${t} = seal.Decryptor(context, secretKey);`,`    const decoResult${t} = decryptor${t}.decrypt(enResult${t}) as PlainText;`,`    const result${t} = encoder${t}.decode(decoResult${t});`,"    //deallocate all the objects resulted",`    eRightValue${t}.delete();`,`    encoder${t}.delete();`,`    decryptor${t}.delete();`,`    evaluator${t}.delete();`,`    eLeftValue${t}.delete();`,`    enLeftValue${t}.delete();`,`    encryptor${t}.delete();`,"    //--------------------------------------"]},[ie.G.CIPHER]:(e,t)=>{const a=this.generatedLeftParameter(e),r=this.generatedRightParameter(e);return["    // ciphertext + ciphertext","    //--------------------------------------","    // create an Encoder and encode the parameters",`    const encoder${t} = seal.BatchEncoder(context);`,`    const leftValue${t} = ${r};`,`    const eLeftValue${t} = encoder${t}.encode(leftValue${t}) as PlainText;`,`    const rightValue${t} = ${a};`,`    const eRightValue${t} = encoder${t}.encode(rightValue${t}) as PlainText;`,"    //create an Encryptor to encrypt the parameter(s)",`    const encryptor${t} = seal.Encryptor(context, publicKey);`,`    const enLeftValue${t} = encryptor${t}.encrypt(eLeftValue${t}) as CipherText;`,`    const enRightValue${t} = encryptor${t}.encrypt(eRightValue${t}) as CipherText;`,"    //create an Evaluator",`    const evaluator${t} = seal.Evaluator(context);`,"    // perform the operation",`    const enResult${t} = evaluator${t}.add(enLeftValue${t}, enRightValue${t}) as CipherText;`,"    //create a Decryptor and decrypt the result",`    const decryptor${t} = seal.Decryptor(context, secretKey);`,`    const decoResult${t} = decryptor${t}.decrypt(enResult${t}) as PlainText;`,`    const result${t} = encoder${t}.decode(decoResult${t});`,"    //deallocate all the objects resulted",`    eRightValue${t}.delete();`,`    encoder${t}.delete();`,`    decryptor${t}.delete();`,`    evaluator${t}.delete();`,`    eLeftValue${t}.delete();`,`    enLeftValue${t}.delete();`,`    encryptor${t}.delete();`,"    //--------------------------------------"]}},["-"]:{[ie.G.PLAIN]:(e,t)=>{const a=this.generatedLeftParameter(e),r=this.generatedRightParameter(e);return["\t   // ciphertext - plaintext","    //--------------------------------------","    // create an Encoder and encode the parameters",`    const encoder${t} = seal.BatchEncoder(context);`,`    const leftValue${t} = ${a};`,`    const eLeftValue${t} = encoder${t}.encode(leftValue${t}) as PlainText;`,`    const rightValue${t} = ${r};`,`    const eRightValue${t} = encoder${t}.encode(rightValue${t}) as PlainText;`,"    //create an Encryptor to encrypt the parameter(s)",`    const encryptor${t} = seal.Encryptor(context, publicKey);`,`    const enLeftValue${t} = encryptor${t}.encrypt(eLeftValue${t}) as CipherText;`,"    //create an Evaluator",`    const evaluator${t} = seal.Evaluator(context);`,"    // perform the operation",`    const enResult${t} = evaluator${t}.subPlain(`,`      enLeftValue${t},`,`      eRightValue${t}`,"    ) as CipherText;","    //create a Decryptor and decrypt the result",`    const decryptor${t} = seal.Decryptor(context, secretKey);`,`    const decoResult${t} = decryptor${t}.decrypt(enResult${t}) as PlainText;`,`    const result${t} = encoder${t}.decode(decoResult${t});`,"    //deallocate all the objects resulted",`    eRightValue${t}.delete();`,`    encoder${t}.delete();`,`    decryptor${t}.delete();`,`    evaluator${t}.delete();`,`    eLeftValue${t}.delete();`,`    enLeftValue${t}.delete();`,`    encryptor${t}.delete();`,"    //--------------------------------------"]},[ie.G.CIPHER]:(e,t)=>{const a=this.generatedLeftParameter(e),r=this.generatedRightParameter(e);return["    // ciphertext - ciphertext","    //--------------------------------------","    // create an Encoder and encode the parameters",`    const encoder${t} = seal.BatchEncoder(context);`,`    const leftValue${t} = ${r};`,`    const eLeftValue${t} = encoder${t}.encode(leftValue${t}) as PlainText;`,`    const rightValue${t} = ${a};`,`    const eRightValue${t} = encoder${t}.encode(rightValue${t}) as PlainText;`,"    //create an Encryptor to encrypt the parameter(s)",`    const encryptor${t} = seal.Encryptor(context, publicKey);`,`    const enLeftValue${t} = encryptor${t}.encrypt(eLeftValue${t}) as CipherText;`,`    const enRightValue${t} = encryptor${t}.encrypt(eRightValue${t}) as CipherText;`,"    //create an Evaluator",`    const evaluator${t} = seal.Evaluator(context);`,"    // perform the operation",`    const enResult${t} = evaluator${t}.sub(enLeftValue${t}, enRightValue${t}) as CipherText;`,"    //create a Decryptor and decrypt the result",`    const decryptor${t} = seal.Decryptor(context, secretKey);`,`    const decoResult${t} = decryptor${t}.decrypt(enResult${t}) as PlainText;`,`    const result${t} = encoder${t}.decode(decoResult${t});`,"    //deallocate all the objects resulted",`    eRightValue${t}.delete();`,`    encoder${t}.delete();`,`    decryptor${t}.delete();`,`    evaluator${t}.delete();`,`    eLeftValue${t}.delete();`,`    enLeftValue${t}.delete();`,`    encryptor${t}.delete();`,"    //--------------------------------------"]}},["*"]:{[ie.G.PLAIN]:(e,t)=>{const a=this.generatedLeftParameter(e),r=this.generatedRightParameter(e);return["\t   // ciphertext * plaintext","    //--------------------------------------","    // create an Encoder and encode the parameters",`    const encoder${t} = seal.BatchEncoder(context);`,`    const leftValue${t} = ${a};`,`    const eLeftValue${t} = encoder${t}.encode(leftValue${t}) as PlainText;`,`    const rightValue${t} = ${r};`,`    const eRightValue${t} = encoder${t}.encode(rightValue${t}) as PlainText;`,"    //create an Encryptor to encrypt the parameter(s)",`    const encryptor${t} = seal.Encryptor(context, publicKey);`,`    const enLeftValue${t} = encryptor${t}.encrypt(eLeftValue${t}) as CipherText;`,"    //create an Evaluator",`    const evaluator${t} = seal.Evaluator(context);`,"    // perform the operation",`    const enResult${t} = evaluator${t}.multiplyPlain(`,`      enLeftValue${t},`,`      eRightValue${t}`,"    ) as CipherText;","    //create a Decryptor and decrypt the result",`    const decryptor${t} = seal.Decryptor(context, secretKey);`,`    const decoResult${t} = decryptor${t}.decrypt(enResult${t}) as PlainText;`,`    const result${t} = encoder${t}.decode(decoResult${t});`,"    //deallocate all the objects resulted",`    eRightValue${t}.delete();`,`    encoder${t}.delete();`,`    decryptor${t}.delete();`,`    evaluator${t}.delete();`,`    eLeftValue${t}.delete();`,`    enLeftValue${t}.delete();`,`    encryptor${t}.delete();`,"    //--------------------------------------"]},[ie.G.CIPHER]:(e,t)=>{const a=this.generatedLeftParameter(e),r=this.generatedRightParameter(e);return["    // ciphertext * ciphertext","    //--------------------------------------","    // create an Encoder and encode the parameters",`    const encoder${t} = seal.BatchEncoder(context);`,`    const leftValue${t} = ${r};`,`    const eLeftValue${t} = encoder${t}.encode(leftValue${t}) as PlainText;`,`    const rightValue${t} = ${a};`,`    const eRightValue${t} = encoder${t}.encode(rightValue${t}) as PlainText;`,"    //create an Encryptor to encrypt the parameter(s)",`    const encryptor${t} = seal.Encryptor(context, publicKey);`,`    const enLeftValue${t} = encryptor${t}.encrypt(eLeftValue${t}) as CipherText;`,`    const enRightValue${t} = encryptor${t}.encrypt(eRightValue${t}) as CipherText;`,"    //create an Evaluator",`    const evaluator${t} = seal.Evaluator(context);`,"    // perform the operation",`    const enResult${t} = evaluator${t}.multiply(`,`      enLeftValue${t},`,`      enRightValue${t}`,"    ) as CipherText;","    //create a Decryptor and decrypt the result",`    const decryptor${t} = seal.Decryptor(context, secretKey);`,`    const decoResult${t} = decryptor${t}.decrypt(enResult${t}) as PlainText;`,`    const result${t} = encoder${t}.decode(decoResult${t});`,"    //deallocate all the objects resulted",`    eRightValue${t}.delete();`,`    encoder${t}.delete();`,`    decryptor${t}.delete();`,`    evaluator${t}.delete();`,`    eLeftValue${t}.delete();`,`    enLeftValue${t}.delete();`,`    encryptor${t}.delete();`,"    //--------------------------------------"]}}}},[`${p.Px.CKKS}`]:{[ie.G.PLAIN]:{["+"]:{[ie.G.PLAIN]:(e,t)=>{const a=this.generatedLeftParameter(e),r=this.generatedRightParameter(e);return["     // plaintext + plaintext","     //--------------------------------------",`     const leftValue${t} = ${a};`,`     const rightValue${t} = ${r};`,`     const maxSize${t} =`,`       leftValue${t}.length > rightValue${t}.length ? leftValue${t}.length : rightValue${t}.length;`,`     const result${t} = Int32Array.from(new Array(maxSize${t}).fill(0));`,`     for (let i = 0; i < result${t}.length; i++) {`,`       result${t}[i] = leftValue${t}[i] + rightValue${t}[i];`,"     }","     //--------------------------------------"]},[ie.G.CIPHER]:(t,a)=>{const r=this.generatedLeftParameter(t),s=this.generatedRightParameter(t);return["    // plaintext + ciphertext","    //--------------------------------------","    // create an Encoder and encode the parameters",`    const encoder${a} = seal.CKKSEncoder(context);`,`    const leftValue${a} = ${r}`,`    const eLeftValue${a} = encoder${a}.encode(leftValue${a},${this.computedSealPrecision[e]}) as PlainText;`,`    const rightValue${a} = ${s};`,`    const eRightValue${a} = encoder${a}.encode(rightValue${a},${this.computedSealPrecision[e]}) as PlainText;`,"    //create an Encryptor to encrypt the parameter(s)",`    const encryptor${a} = seal.Encryptor(context, publicKey);`,`    const enRightValue${a} = encryptor${a}.encrypt(eRightValue${a}) as CipherText;`,"    //create an Evaluator",`    const evaluator${a} = seal.Evaluator(context);`,"    // perform the operation",`    const enResult${a} = evaluator${a}.addPlain(`,`      enRightValue${a},`,`      eLeftValue${a}`,"    ) as CipherText;","    //create a Decryptor and decrypt the result",`    const decryptor${a} = seal.Decryptor(context, secretKey);`,`    const decoResult${a} = decryptor${a}.decrypt(enResult${a}) as PlainText;`,`    const result${a} = encoder${a}.decode(decoResult${a});`,"    //deallocate all the objects resulted",`    eRightValue${a}.delete();`,`    encoder${a}.delete();`,`    decryptor${a}.delete();`,`    evaluator${a}.delete();`,`    eLeftValue${a}.delete();`,`    enRightValue${a}.delete();`,`    encryptor${a}.delete();`,"    //--------------------------------------"]}},["-"]:{[ie.G.PLAIN]:(e,t)=>{const a=this.generatedLeftParameter(e),r=this.generatedRightParameter(e);return["     // plaintext - plaintext","     //--------------------------------------",`     const leftValue${t} = ${a};`,`     const rightValue${t} = ${r};`,`     const maxSize${t} =`,`       leftValue${t}.length > rightValue${t}.length ? leftValue${t}.length : rightValue${t}.length;`,`     const result${t} = Int32Array.from(new Array(maxSize${t}).fill(0));`,`     for (let i = 0; i < result${t}.length; i++) {`,`       result${t}[i] = leftValue${t}[i] - rightValue${t}[i];`,"     }","     //--------------------------------------"]},[ie.G.CIPHER]:(t,a)=>{const r=this.generatedLeftParameter(t),s=this.generatedRightParameter(t);return["    // plaintext - ciphertext","    //--------------------------------------","    // create an Encoder and encode the parameters",`    const encoder${a} = seal.CKKSEncoder(context);`,`    const leftValue${a} = ${r}`,`    const eLeftValue${a} = encoder${a}.encode(leftValue${a},${this.computedSealPrecision[e]}) as PlainText;`,`    const rightValue${a} = ${s};`,`    const eRightValue${a} = encoder${a}.encode(rightValue${a},${this.computedSealPrecision[e]}) as PlainText;`,"    //create an Encryptor to encrypt the parameter(s)",`    const encryptor${a} = seal.Encryptor(context, publicKey);`,`    const enRightValue${a} = encryptor${a}.encrypt(eRightValue${a}) as CipherText;`,"    //create an Evaluator",`    const evaluator${a} = seal.Evaluator(context);`,"    // perform the operation",`    const enResult${a} = evaluator${a}.subPlain(`,`      enRightValue${a},`,`      eLeftValue${a}`,"    ) as CipherText;","    //create a Decryptor and decrypt the result",`    const decryptor${a} = seal.Decryptor(context, secretKey);`,`    const decoResult${a} = decryptor${a}.decrypt(enResult${a}) as PlainText;`,`    const result${a} = encoder${a}.decode(decoResult${a});`,"    //deallocate all the objects resulted",`    eRightValue${a}.delete();`,`    encoder${a}.delete();`,`    decryptor${a}.delete();`,`    evaluator${a}.delete();`,`    eLeftValue${a}.delete();`,`    enRightValue${a}.delete();`,`    encryptor${a}.delete();`,"    //--------------------------------------"]}},["*"]:{[ie.G.PLAIN]:(e,t)=>{const a=this.generatedLeftParameter(e),r=this.generatedRightParameter(e);return["     // plaintext * plaintext","     //--------------------------------------",`     const leftValue${t} = ${a};`,`     const rightValue${t} = ${r};`,`     const maxSize${t} =`,`       leftValue${t}.length > rightValue${t}.length ? leftValue${t}.length : rightValue${t}.length;`,`     const result${t} = Int32Array.from(new Array(maxSize${t}).fill(0));`,`     for (let i = 0; i < result${t}.length; i++) {`,`       result${t}[i] = leftValue${t}[i] * rightValue${t}[i];`,"     }","     //--------------------------------------"]},[ie.G.CIPHER]:(t,a)=>{const r=this.generatedLeftParameter(t),s=this.generatedRightParameter(t);return["    // plaintext * ciphertext","    //--------------------------------------","    // create an Encoder and encode the parameters",`    const encoder${a} = seal.CKKSEncoder(context);`,`    const leftValue${a} = ${r}`,`    const eLeftValue${a} = encoder${a}.encode(leftValue${a},${this.computedSealPrecision[e]}) as PlainText;`,`    const rightValue${a} = ${s};`,`    const eRightValue${a} = encoder${a}.encode(rightValue${a},${this.computedSealPrecision[e]}) as PlainText;`,"    //create an Encryptor to encrypt the parameter(s)",`    const encryptor${a} = seal.Encryptor(context, publicKey);`,`    const enRightValue${a} = encryptor${a}.encrypt(eRightValue${a}) as CipherText;`,"    //create an Evaluator",`    const evaluator${a} = seal.Evaluator(context);`,"    // perform the operation",`    const enResult${a} = evaluator${a}.multiplyPlain(`,`      enRightValue${a},`,`      eLeftValue${a}`,"    ) as CipherText;","    //create a Decryptor and decrypt the result",`    const decryptor${a} = seal.Decryptor(context, secretKey);`,`    const decoResult${a} = decryptor${a}.decrypt(enResult${a}) as PlainText;`,`    const result${a} = encoder${a}.decode(decoResult${a});`,"    //deallocate all the objects resulted",`    eRightValue${a}.delete();`,`    encoder${a}.delete();`,`    decryptor${a}.delete();`,`    evaluator${a}.delete();`,`    eLeftValue${a}.delete();`,`    enRightValue${a}.delete();`,`    encryptor${a}.delete();`,"    //--------------------------------------"]}}},[ie.G.CIPHER]:{["+"]:{[ie.G.PLAIN]:(t,a)=>{const r=this.generatedLeftParameter(t),s=this.generatedRightParameter(t);return["\t   // ciphertext + plaintext","    //--------------------------------------","    // create an Encoder and encode the parameters",`    const encoder${a} = seal.CKKSEncoder(context);`,`    const leftValue${a} = ${r};`,`    const eLeftValue${a} = encoder${a}.encode(leftValue${a},${this.computedSealPrecision[e]}) as PlainText;`,`    const rightValue${a} = ${s};`,`    const eRightValue${a} = encoder${a}.encode(rightValue${a},${this.computedSealPrecision[e]}) as PlainText;`,"    //create an Encryptor to encrypt the parameter(s)",`    const encryptor${a} = seal.Encryptor(context, publicKey);`,`    const enLeftValue${a} = encryptor${a}.encrypt(eLeftValue${a}) as CipherText;`,"    //create an Evaluator",`    const evaluator${a} = seal.Evaluator(context);`,"    // perform the operation",`    const enResult${a} = evaluator${a}.addPlain(`,`      enLeftValue${a},`,`      eRightValue${a}`,"    ) as CipherText;","    //create a Decryptor and decrypt the result",`    const decryptor${a} = seal.Decryptor(context, secretKey);`,`    const decoResult${a} = decryptor${a}.decrypt(enResult${a}) as PlainText;`,`    const result${a} = encoder${a}.decode(decoResult${a});`,"    //deallocate all the objects resulted",`    eRightValue${a}.delete();`,`    encoder${a}.delete();`,`    decryptor${a}.delete();`,`    evaluator${a}.delete();`,`    eLeftValue${a}.delete();`,`    enLeftValue${a}.delete();`,`    encryptor${a}.delete();`,"    //--------------------------------------"]},[ie.G.CIPHER]:(t,a)=>{const r=this.generatedLeftParameter(t),s=this.generatedRightParameter(t);return["    // ciphertext + ciphertext","    //--------------------------------------","    // create an Encoder and encode the parameters",`    const encoder${a} = seal.CKKSEncoder(context);`,`    const leftValue${a} = ${s};`,`    const eLeftValue${a} = encoder${a}.encode(leftValue${a},${this.computedSealPrecision[e]}) as PlainText;`,`    const rightValue${a} = ${r};`,`    const eRightValue${a} = encoder${a}.encode(rightValue${a},${this.computedSealPrecision[e]}) as PlainText;`,"    //create an Encryptor to encrypt the parameter(s)",`    const encryptor${a} = seal.Encryptor(context, publicKey);`,`    const enLeftValue${a} = encryptor${a}.encrypt(eLeftValue${a}) as CipherText;`,`    const enRightValue${a} = encryptor${a}.encrypt(eRightValue${a}) as CipherText;`,"    //create an Evaluator",`    const evaluator${a} = seal.Evaluator(context);`,"    // perform the operation",`    const enResult${a} = evaluator${a}.add(enLeftValue${a}, enRightValue${a}) as CipherText;`,"    //create a Decryptor and decrypt the result",`    const decryptor${a} = seal.Decryptor(context, secretKey);`,`    const decoResult${a} = decryptor${a}.decrypt(enResult${a}) as PlainText;`,`    const result${a} = encoder${a}.decode(decoResult${a});`,"    //deallocate all the objects resulted",`    eRightValue${a}.delete();`,`    encoder${a}.delete();`,`    decryptor${a}.delete();`,`    evaluator${a}.delete();`,`    eLeftValue${a}.delete();`,`    enLeftValue${a}.delete();`,`    encryptor${a}.delete();`,"    //--------------------------------------"]}},["-"]:{[ie.G.PLAIN]:(t,a)=>{const r=this.generatedLeftParameter(t),s=this.generatedRightParameter(t);return["\t   // ciphertext - plaintext","    //--------------------------------------","    // create an Encoder and encode the parameters",`    const encoder${a} = seal.CKKSEncoder(context);`,`    const leftValue${a} = ${r};`,`    const eLeftValue${a} = encoder${a}.encode(leftValue${a},${this.computedSealPrecision[e]}) as PlainText;`,`    const rightValue${a} = ${s};`,`    const eRightValue${a} = encoder${a}.encode(rightValue${a},${this.computedSealPrecision[e]}) as PlainText;`,"    //create an Encryptor to encrypt the parameter(s)",`    const encryptor${a} = seal.Encryptor(context, publicKey);`,`    const enLeftValue${a} = encryptor${a}.encrypt(eLeftValue${a}) as CipherText;`,"    //create an Evaluator",`    const evaluator${a} = seal.Evaluator(context);`,"    // perform the operation",`    const enResult${a} = evaluator${a}.subPlain(`,`      enLeftValue${a},`,`      eRightValue${a}`,"    ) as CipherText;","    //create a Decryptor and decrypt the result",`    const decryptor${a} = seal.Decryptor(context, secretKey);`,`    const decoResult${a} = decryptor${a}.decrypt(enResult${a}) as PlainText;`,`    const result${a} = encoder${a}.decode(decoResult${a});`,"    //deallocate all the objects resulted",`    eRightValue${a}.delete();`,`    encoder${a}.delete();`,`    decryptor${a}.delete();`,`    evaluator${a}.delete();`,`    eLeftValue${a}.delete();`,`    enLeftValue${a}.delete();`,`    encryptor${a}.delete();`,"    //--------------------------------------"]},[ie.G.CIPHER]:(t,a)=>{const r=this.generatedLeftParameter(t),s=this.generatedRightParameter(t);return["    // ciphertext - ciphertext","    //--------------------------------------","    // create an Encoder and encode the parameters",`    const encoder${a} = seal.CKKSEncoder(context);`,`    const leftValue${a} = ${s};`,`    const eLeftValue${a} = encoder${a}.encode(leftValue${a},${this.computedSealPrecision[e]}) as PlainText;`,`    const rightValue${a} = ${r};`,`    const eRightValue${a} = encoder${a}.encode(rightValue${a},${this.computedSealPrecision[e]}) as PlainText;`,"    //create an Encryptor to encrypt the parameter(s)",`    const encryptor${a} = seal.Encryptor(context, publicKey);`,`    const enLeftValue${a} = encryptor${a}.encrypt(eLeftValue${a}) as CipherText;`,`    const enRightValue${a} = encryptor${a}.encrypt(eRightValue${a}) as CipherText;`,"    //create an Evaluator",`    const evaluator${a} = seal.Evaluator(context);`,"    // perform the operation",`    const enResult${a} = evaluator${a}.sub(enLeftValue${a}, enRightValue${a}) as CipherText;`,"    //create a Decryptor and decrypt the result",`    const decryptor${a} = seal.Decryptor(context, secretKey);`,`    const decoResult${a} = decryptor${a}.decrypt(enResult${a}) as PlainText;`,`    const result${a} = encoder${a}.decode(decoResult${a});`,"    //deallocate all the objects resulted",`    eRightValue${a}.delete();`,`    encoder${a}.delete();`,`    decryptor${a}.delete();`,`    evaluator${a}.delete();`,`    eLeftValue${a}.delete();`,`    enLeftValue${a}.delete();`,`    encryptor${a}.delete();`,"    //--------------------------------------"]}},["*"]:{[ie.G.PLAIN]:(t,a)=>{const r=this.generatedLeftParameter(t),s=this.generatedRightParameter(t);return["\t   // ciphertext * plaintext","    //--------------------------------------","    // create an Encoder and encode the parameters",`    const encoder${a} = seal.CKKSEncoder(context);`,`    const leftValue${a} = ${r};`,`    const eLeftValue${a} = encoder${a}.encode(leftValue${a},${this.computedSealPrecision[e]}) as PlainText;`,`    const rightValue${a} = ${s};`,`    const eRightValue${a} = encoder${a}.encode(rightValue${a},${this.computedSealPrecision[e]}) as PlainText;`,"    //create an Encryptor to encrypt the parameter(s)",`    const encryptor${a} = seal.Encryptor(context, publicKey);`,`    const enLeftValue${a} = encryptor${a}.encrypt(eLeftValue${a}) as CipherText;`,"    //create an Evaluator",`    const evaluator${a} = seal.Evaluator(context);`,"    // perform the operation",`    const enResult${a} = evaluator${a}.multiplyPlain(`,`      enLeftValue${a},`,`      eRightValue${a}`,"    ) as CipherText;","    //create a Decryptor and decrypt the result",`    const decryptor${a} = seal.Decryptor(context, secretKey);`,`    const decoResult${a} = decryptor${a}.decrypt(enResult${a}) as PlainText;`,`    const result${a} = encoder${a}.decode(decoResult${a});`,"    //deallocate all the objects resulted",`    eRightValue${a}.delete();`,`    encoder${a}.delete();`,`    decryptor${a}.delete();`,`    evaluator${a}.delete();`,`    eLeftValue${a}.delete();`,`    enLeftValue${a}.delete();`,`    encryptor${a}.delete();`,"    //--------------------------------------"]},[ie.G.CIPHER]:(t,a)=>{const r=this.generatedLeftParameter(t),s=this.generatedRightParameter(t);return["    // ciphertext * ciphertext","    //--------------------------------------","    // create an Encoder and encode the parameters",`    const encoder${a} = seal.CKKSEncoder(context);`,`    const leftValue${a} = ${s};`,`    const eLeftValue${a} = encoder${a}.encode(leftValue${a},${this.computedSealPrecision[e]}) as PlainText;`,`    const rightValue${a} = ${r};`,`    const eRightValue${a} = encoder${a}.encode(rightValue${a},${this.computedSealPrecision[e]}) as PlainText;`,"    //create an Encryptor to encrypt the parameter(s)",`    const encryptor${a} = seal.Encryptor(context, publicKey);`,`    const enLeftValue${a} = encryptor${a}.encrypt(eLeftValue${a}) as CipherText;`,`    const enRightValue${a} = encryptor${a}.encrypt(eRightValue${a}) as CipherText;`,"    //create an Evaluator",`    const evaluator${a} = seal.Evaluator(context);`,"    // perform the operation",`    const enResult${a} = evaluator${a}.multiply(`,`      enLeftValue${a},`,`      enRightValue${a}`,"    ) as CipherText;","    //create a Decryptor and decrypt the result",`    const decryptor${a} = seal.Decryptor(context, secretKey);`,`    const decoResult${a} = decryptor${a}.decrypt(enResult${a}) as PlainText;`,`    const result${a} = encoder${a}.decode(decoResult${a});`,"    //deallocate all the objects resulted",`    eRightValue${a}.delete();`,`    encoder${a}.delete();`,`    decryptor${a}.delete();`,`    evaluator${a}.delete();`,`    eLeftValue${a}.delete();`,`    enLeftValue${a}.delete();`,`    encryptor${a}.delete();`,"    //--------------------------------------"]}}}}}}}}),qe=(0,r.aZ)({name:"Code",components:{},mixins:[De,Me],props:{scheme:{type:Object,required:!0},generatedCode:{type:String,required:!0}},setup(){return{}},computed:{code(){if("easy-FHE"===this.generatedCode){const e=this.easyFHESetupHeader.code,t=this.scheme.scheme.value,a=[];return this.scheme.operations.forEach(((e,r)=>{const s=this.easyFHECodeMap[t][e.leftSide.type][e.operator][e.rightSide.type](e,r);a.push(...s)})),e.splice(this.easyFHESetupHeader.atIndexToInsert,0,...a),e}if("node-SEAL"===this.generatedCode){const e=this.nodeSealSetupHeader.code,t=this.scheme.scheme.value,a=[];return this.scheme.operations.forEach(((e,r)=>{const s=this.nodeSealCodeMap[t][e.leftSide.type][e.operator][e.rightSide.type](e,r);a.push(...s)})),e.splice(this.nodeSealSetupHeader.atIndexToInsert,0,...a),e}return["// unable to generate for this library"]}},methods:{}}),Be=(0,h.Z)(qe,[["render",_e],["__scopeId","data-v-35fba8ef"]]),Ze=Be,je={class:"q-pa-md q-gutter-sm"},Qe=(0,r.Uk)("Close"),Ue=(0,r._)("div",{class:"text-h3 text-center"},"Metrics",-1),Ye=(0,r._)("div",{class:"text-center text-h4"},"Lines of code comparison",-1),Xe={id:"loc-chart",style:{height:"75vh"}},Je=(0,r._)("div",{class:"text-center text-h4"},"Speed comparison",-1),et={id:"speed-chart",style:{height:"75vh"}},tt=(0,r._)("div",{class:"text-center text-h4"},"Memory usage comparison",-1),at={id:"memory-chart",style:{height:"75vh"}};function rt(e,t,a,s,l,o){const i=(0,r.up)("q-space"),n=(0,r.up)("q-tooltip"),c=(0,r.up)("q-btn"),u=(0,r.up)("q-bar"),p=(0,r.up)("q-card-section"),d=(0,r.up)("VueApexCharts"),h=(0,r.up)("q-carousel-slide"),y=(0,r.up)("q-carousel"),$=(0,r.up)("q-card"),m=(0,r.up)("q-dialog"),f=(0,r.Q2)("close-popup");return(0,r.wg)(),(0,r.iD)("div",je,[(0,r.Wm)(m,{modelValue:e.openGraphsDialog,"onUpdate:modelValue":t[1]||(t[1]=t=>e.openGraphsDialog=t),persistent:"",maximized:!0,"transition-show":"slide-up","transition-hide":"slide-down","full-width":""},{default:(0,r.w5)((()=>[(0,r.Wm)($,{class:"bg-grey-2 text-black"},{default:(0,r.w5)((()=>[(0,r.Wm)(u,{class:"bg-primary text-white"},{default:(0,r.w5)((()=>[(0,r.Wm)(i),(0,r.wy)(((0,r.wg)(),(0,r.j4)(c,{class:"q-pa-md",dense:"",flat:"",icon:"close"},{default:(0,r.w5)((()=>[(0,r.Wm)(n,{offset:[0,10],class:"bg-primary text-white"},{default:(0,r.w5)((()=>[Qe])),_:1})])),_:1})),[[f]])])),_:1}),(0,r.Wm)(p,null,{default:(0,r.w5)((()=>[Ue])),_:1}),(0,r.Wm)(p,{style:{height:"'80vh'"}},{default:(0,r.w5)((()=>[(0,r.Wm)(y,{modelValue:e.slide,"onUpdate:modelValue":t[0]||(t[0]=t=>e.slide=t),vertical:"","transition-prev":"slide-down","transition-next":"slide-up",swipeable:"",animated:"","control-color":"black","navigation-icon":"radio_button_unchecked",navigation:"",height:"80vh",class:"bg-white text-black shadow-1 rounded-borders"},{default:(0,r.w5)((()=>[(0,r.Wm)(h,{name:"loc"},{default:(0,r.w5)((()=>[Ye,(0,r._)("div",Xe,[(0,r.Wm)(d,{width:"90%",height:"90%",options:e.chartOptionsLoC,series:e.seriesLoC},null,8,["options","series"])])])),_:1}),(0,r.Wm)(h,{name:"speed"},{default:(0,r.w5)((()=>[Je,(0,r._)("div",et,[(0,r.Wm)(d,{width:"90%",height:"90%",options:e.chartOptionsSpeed,series:e.seriesSpeed},null,8,["options","series"])])])),_:1}),(0,r.Wm)(h,{name:"memory"},{default:(0,r.w5)((()=>[tt,(0,r._)("div",at,[(0,r.Wm)(d,{width:"90%",height:"90%",options:e.chartOptionsMemory,series:e.seriesMemory},null,8,["options","series"])])])),_:1})])),_:1},8,["modelValue"])])),_:1})])),_:1})])),_:1},8,["modelValue"])])}const st="#121212",lt="#424242",ot="#727272",it=(0,r.aZ)({name:"CodeComparison",components:{VueApexCharts:Te()},mixins:[De,Me],props:{scheme:{type:Object,required:!0}},setup(){const e=(0,l.C)(),{openGraphsDialog:t,operationSpeedMap:a,setupSpeedMap:r,setupMemoryMap:s,operationMemoryMap:i}=(0,o.Jk)(e);return{openGraphsDialog:t,operationSpeedMap:a,setupSpeedMap:r,setupMemoryMap:s,operationMemoryMap:i,slide:(0,u.iH)("loc")}},computed:{code(){const e={setup:0,operations:0,deallocations:0,commentsAndBlankLines:0,total:0},t=this.scheme.scheme.value,a=this.scheme.security.value,r=this.scheme.speed.value,s=this.scheme.precision.value;e.setup=this.easyFHESetupHeader.code.length-3,e.deallocations=3;let l=0,o=0;this.scheme.operations.forEach(((i,n)=>{const c=this.easyFHECodeMap[t][i.leftSide.type][i.operator][i.rightSide.type](i,n);e.deallocations+=c.filter((e=>e.includes("delete()"))).length,e.operations+=c.filter((e=>!e.includes("delete()"))).length,e.commentsAndBlankLines+=c.filter((e=>e.includes("//")||0===e.trim().length)).length,l+=this.operationSpeedMap.easyFhe[`${t}`][a][r][s][i.leftSide.type][i.operator][i.rightSide.type],o+=this.operationMemoryMap.easyFhe[`${t}`][a][r][s][i.leftSide.type][i.operator][i.rightSide.type]})),l+=this.setupSpeedMap.easyFhe[`${t}`][a][r][s],o+=this.setupMemoryMap.easyFhe[`${t}`][a][r][s];const i={setup:0,operations:0,deallocations:0,commentsAndBlankLines:0,total:0};i.setup=this.nodeSealSetupHeader.code.length-5,i.deallocations=5;let n=0,c=0;return this.scheme.operations.forEach(((e,l)=>{const o=this.nodeSealCodeMap[t][e.leftSide.type][e.operator][e.rightSide.type](e,l);i.deallocations+=o.filter((e=>e.includes("delete()"))).length,i.operations+=o.filter((e=>!e.includes("delete()")||!e.includes("//")||0!==e.trim().length)).length,i.commentsAndBlankLines+=o.filter((e=>e.includes("//")||0===e.trim().length)).length,n+=this.operationSpeedMap.nodeSeal[`${t}`][a][r][s][e.leftSide.type][e.operator][e.rightSide.type],c+=this.operationMemoryMap.nodeSeal[`${t}`][a][r][s][e.leftSide.type][e.operator][e.rightSide.type]})),n+=this.setupSpeedMap.nodeSeal[`${t}`][a][r][s],c+=this.setupMemoryMap.nodeSeal[`${t}`][a][r][s],e.total=e.setup+e.operations+e.deallocations,i.total=i.setup+i.operations+i.deallocations,{stats:{easyFHE:{loc:e,speed:l,memory:o},seal:{loc:i,speed:n,memory:c}}}},chartOptionsLoC(){return{chart:{animations:{enabled:!0,easing:"easeinout",speed:800,animateGradually:{enabled:!0,delay:250},dynamicAnimation:{enabled:!0,speed:450}},title:{text:"libraries",offsetX:0,offsetY:0,style:{fontSize:"16px",fontFamily:"Helvetica, Arial, sans-serif",fontWeight:600,cssClass:"apexcharts-xaxis-title"}},type:"bar",stacked:!0,toolbar:{show:!0},zoom:{enabled:!0}},responsive:[{breakpoint:480,options:{legend:{position:"bottom",offsetX:-10,offsetY:0}}}],plotOptions:{bar:{horizontal:!1,borderRadius:2}},xaxis:{categories:["EasyFHE","node-SEAL"],title:{text:"libraries",offsetX:0,offsetY:0,style:{fontSize:"16px",fontFamily:"Helvetica, Arial, sans-serif",fontWeight:600,cssClass:"apexcharts-xaxis-title"}}},yaxis:{title:{text:"Lines of Code (LoC)",offsetX:0,offsetY:0,style:{fontSize:"16px",fontFamily:"Helvetica, Arial, sans-serif",fontWeight:600,cssClass:"apexcharts-yaxis-title"}},labels:{formatter:function(e){return Number.parseFloat(e).toFixed(0)+" lines"}}},legend:{position:"right",horizontalAlign:"left",offsetY:40},fill:{opacity:1},dataLabels:{enabled:!0,formatter:function(e){return Number.parseFloat(e).toFixed(0)},style:{fontSize:"1.5vw",whiteSpace:"normal",colors:["#FFF"]},dropShadow:{enabled:!0,right:2,top:2,opacity:.8}},annotations:{points:[{x:"EasyFHE",y:this.code.stats.easyFHE.loc.total,marker:{size:0},label:{offsetY:-30,borderColor:"#775DD0",text:`${this.code.stats.easyFHE.loc.total} lines`,style:{fontSize:"1rem",offsetY:20}}},{x:"node-SEAL",y:this.code.stats.seal.loc.total,marker:{size:0},label:{offsetY:-30,borderColor:"#775DD0",text:`${this.code.stats.seal.loc.total} lines`,style:{fontSize:"1rem"}}}]}}},seriesLoC(){return[{name:"Setup",data:[this.code.stats.easyFHE.loc.setup,this.code.stats.seal.loc.setup],color:st},{name:"Operations",data:[this.code.stats.easyFHE.loc.operations,this.code.stats.seal.loc.operations],color:lt},{name:"Deallocation",data:[this.code.stats.easyFHE.loc.deallocations,this.code.stats.seal.loc.deallocations],color:ot}]},chartOptionsSpeed(){return{stroke:{colors:["transparent"],width:10},chart:{animations:{enabled:!0,easing:"easeinout",speed:800,animateGradually:{enabled:!0,delay:250},dynamicAnimation:{enabled:!0,speed:450}},title:{text:"libraries",offsetX:0,offsetY:0,style:{fontSize:"16px",fontFamily:"Helvetica, Arial, sans-serif",fontWeight:600,cssClass:"apexcharts-xaxis-title"}},type:"bar",stacked:!1,toolbar:{show:!0},zoom:{enabled:!0}},responsive:[{breakpoint:480,options:{legend:{position:"bottom",offsetX:-10,offsetY:0}}}],plotOptions:{bar:{horizontal:!1,borderRadius:2,distributed:!0,dataLabels:{position:"center"}}},colors:[st,ot],dataLabels:{enabled:!0,formatter:function(e){return Number.parseFloat(e).toFixed(2)+" ms"},style:{fontSize:"3vw",whiteSpace:"normal"},dropShadow:{enabled:!0,right:2,top:2,opacity:.8}},xaxis:{title:{text:"libraries",offsetX:0,offsetY:0,style:{fontSize:"16px",fontFamily:"Helvetica, Arial, sans-serif",fontWeight:600,cssClass:"apexcharts-xaxis-title"}}},yaxis:{title:{text:"Time (milliseconds)",offsetX:0,offsetY:0,style:{fontSize:"16px",fontFamily:"Helvetica, Arial, sans-serif",fontWeight:600,cssClass:"apexcharts-xaxis-title"}},labels:{formatter:function(e){return Number.parseFloat(e).toFixed(0)+" ms"}}},legend:{position:"right",horizontalAlign:"left",offsetY:40,showForSingleSeries:!0},fill:{opacity:1}}},seriesSpeed(){return[{name:"Processing time",data:[{x:"EasyFHE",y:this.code.stats.easyFHE.speed},{x:"node-SEAL",y:this.code.stats.seal.speed}]}]},chartOptionsMemory(){return{stroke:{colors:["transparent"],width:10},chart:{animations:{enabled:!0,easing:"easeinout",speed:800,animateGradually:{enabled:!0,delay:250},dynamicAnimation:{enabled:!0,speed:450}},title:{text:"libraries",offsetX:0,offsetY:0,style:{fontSize:"16px",fontFamily:"Helvetica, Arial, sans-serif",fontWeight:600,cssClass:"apexcharts-xaxis-title"}},type:"bar",stacked:!1,toolbar:{show:!0},zoom:{enabled:!0}},responsive:[{breakpoint:480,options:{legend:{position:"bottom",offsetX:-10,offsetY:0}}}],plotOptions:{bar:{horizontal:!1,borderRadius:2,distributed:!0,dataLabels:{position:"center"}}},colors:[st,ot],dataLabels:{enabled:!0,formatter:function(e){return`${(Number.parseFloat(e)/1024).toFixed(2)} kB`},style:{fontSize:"3vw",whiteSpace:"normal"},dropShadow:{enabled:!0,right:2,top:2,opacity:.8}},xaxis:{title:{text:"libraries",offsetX:0,offsetY:0,style:{fontSize:"16px",fontFamily:"Helvetica, Arial, sans-serif",fontWeight:600,cssClass:"apexcharts-xaxis-title"}}},yaxis:{title:{text:"Size (kilobytes)",offsetX:0,offsetY:0,style:{fontSize:"16px",fontFamily:"Helvetica, Arial, sans-serif",fontWeight:600,cssClass:"apexcharts-xaxis-title"}},labels:{formatter:function(e){return`${(Number.parseFloat(e)/1024).toFixed(2)} kB`}}},legend:{position:"right",horizontalAlign:"left",offsetY:40,showForSingleSeries:!0},fill:{opacity:1}}},seriesMemory(){return[{name:"Used memory",data:[{x:"EasyFHE",y:this.code.stats.easyFHE.memory},{x:"node-SEAL",y:this.code.stats.seal.memory}]}]}},methods:{closeGraphs(){this.openGraphsDialog=!1}}});var nt=a(4526),ct=a(136),ut=a(6858),pt=a(960),dt=a(1694),ht=a(2146);const yt=(0,h.Z)(it,[["render",rt]]),$t=yt;C()(it,"components",{QDialog:y.Z,QCard:$.Z,QBar:nt.Z,QSpace:ct.Z,QBtn:R.Z,QTooltip:ut.Z,QCardSection:f.Z,QCarousel:pt.Z,QCarouselSlide:dt.Z}),C()(it,"directives",{ClosePopup:ht.Z});const mt="#121212",ft="#424242",gt="#727272",vt=(0,r.aZ)({name:"CodeComparison",components:{Code:Ze,VueApexCharts:Te(),Graphs:$t},mixins:[De,Me],props:{scheme:{type:Object,required:!0}},setup(){const e=(0,l.C)(),{openCodeComparisonDialog:t,openGraphsDialog:a,operationSpeedMap:r,setupSpeedMap:s,setupMemoryMap:i,operationMemoryMap:n}=(0,o.Jk)(e),c=(0,u.iH)(),p=(0,u.iH)();let d=(0,u.iH)("");return{openCodeComparisonDialog:t,openGraphsDialog:a,isFullScreen:(0,u.iH)(!1),firstRef:c,secondRef:p,ignoreSource:d,operationSpeedMap:r,setupSpeedMap:s,setupMemoryMap:i,operationMemoryMap:n}},computed:{code(){const e={setup:0,operations:0,deallocations:0,commentsAndBlankLines:0,total:0},t=this.scheme.scheme.value,a=this.scheme.security.value,r=this.scheme.speed.value,s=this.scheme.precision.value;e.setup=this.easyFHESetupHeader.code.length-3,e.deallocations=3;let l=0,o=0;this.scheme.operations.forEach(((i,n)=>{const c=this.easyFHECodeMap[t][i.leftSide.type][i.operator][i.rightSide.type](i,n);e.deallocations+=c.filter((e=>e.includes("delete()"))).length,e.operations+=c.filter((e=>!e.includes("delete()"))).length,e.commentsAndBlankLines+=c.filter((e=>e.includes("//")||0===e.trim().length)).length,l+=this.operationSpeedMap.easyFhe[`${t}`][a][r][s][i.leftSide.type][i.operator][i.rightSide.type],o+=this.operationMemoryMap.easyFhe[`${t}`][a][r][s][i.leftSide.type][i.operator][i.rightSide.type]})),l+=this.setupSpeedMap.easyFhe[`${t}`][a][r][s],o+=this.setupMemoryMap.easyFhe[`${t}`][a][r][s];const i={setup:0,operations:0,deallocations:0,commentsAndBlankLines:0,total:0};i.setup=this.nodeSealSetupHeader.code.length-5,i.deallocations=5;let n=0,c=0;return this.scheme.operations.forEach(((e,l)=>{const o=this.nodeSealCodeMap[t][e.leftSide.type][e.operator][e.rightSide.type](e,l);i.deallocations+=o.filter((e=>e.includes("delete()"))).length,i.operations+=o.filter((e=>!e.includes("delete()")||!e.includes("//")||0!==e.trim().length)).length,i.commentsAndBlankLines+=o.filter((e=>e.includes("//")||0===e.trim().length)).length,n+=this.operationSpeedMap.nodeSeal[`${t}`][a][r][s][e.leftSide.type][e.operator][e.rightSide.type],c+=this.operationMemoryMap.nodeSeal[`${t}`][a][r][s][e.leftSide.type][e.operator][e.rightSide.type]})),n+=this.setupSpeedMap.nodeSeal[`${t}`][a][r][s],c+=this.setupMemoryMap.nodeSeal[`${t}`][a][r][s],e.total=e.setup+e.operations+e.deallocations,i.total=i.setup+i.operations+i.deallocations,{stats:{easyFHE:{loc:e,speed:l,memory:o},seal:{loc:i,speed:n,memory:c}}}},chartOptionsLoC(){return{chart:{animations:{enabled:!0,easing:"easeinout",speed:800,animateGradually:{enabled:!0,delay:250},dynamicAnimation:{enabled:!0,speed:450}},title:{text:"libraries",offsetX:0,offsetY:0,style:{fontSize:"16px",fontFamily:"Helvetica, Arial, sans-serif",fontWeight:600,cssClass:"apexcharts-xaxis-title"}},type:"bar",height:250,stacked:!0,toolbar:{show:!0},zoom:{enabled:!0}},responsive:[{breakpoint:480,options:{legend:{position:"bottom",offsetX:-10,offsetY:0}}}],plotOptions:{bar:{horizontal:!1,borderRadius:2}},xaxis:{categories:["EasyFHE","node-SEAL"],title:{text:"libraries",offsetX:0,offsetY:0,style:{fontSize:"16px",fontFamily:"Helvetica, Arial, sans-serif",fontWeight:600,cssClass:"apexcharts-xaxis-title"}}},yaxis:{title:{text:"Lines of Code (LoC)",offsetX:0,offsetY:0,style:{fontSize:"16px",fontFamily:"Helvetica, Arial, sans-serif",fontWeight:600,cssClass:"apexcharts-xaxis-title"}},labels:{formatter:function(e){return Number.parseFloat(e).toFixed(0)+" LoC"}}},legend:{position:"right",horizontalAlign:"left",offsetY:40},fill:{opacity:1},annotations:{points:[]},dataLabels:{enabled:!1,formatter:function(e){return Number.parseFloat(e).toFixed(0)},style:{fontSize:"1.5vw",whiteSpace:"normal",colors:["#FFF"]},dropShadow:{enabled:!0,right:2,top:2,opacity:.8}}}},seriesLoC(){return[{name:"Setup",data:[this.code.stats.easyFHE.loc.setup,this.code.stats.seal.loc.setup],color:mt},{name:"Operations",data:[this.code.stats.easyFHE.loc.operations,this.code.stats.seal.loc.operations],color:ft},{name:"Deallocation",data:[this.code.stats.easyFHE.loc.deallocations,this.code.stats.seal.loc.deallocations],color:gt}]},chartOptionsSpeed(){return{stroke:{colors:["transparent"],width:10},chart:{animations:{enabled:!0,easing:"easeinout",speed:800,animateGradually:{enabled:!0,delay:250},dynamicAnimation:{enabled:!0,speed:450}},title:{text:"libraries",offsetX:0,offsetY:0,style:{fontSize:"16px",fontFamily:"Helvetica, Arial, sans-serif",fontWeight:600,cssClass:"apexcharts-xaxis-title"}},height:250,stacked:!1,toolbar:{show:!0},zoom:{enabled:!0}},responsive:[{breakpoint:480,options:{legend:{position:"bottom",offsetX:-10,offsetY:0}}}],plotOptions:{bar:{horizontal:!1,borderRadius:2,distributed:!0,dataLabels:{position:"center"}}},colors:[mt,gt],dataLabels:{enabled:!1,formatter:function(e){return Number.parseFloat(e).toFixed(0)+" ms"},style:{fontSize:"1vw",whiteSpace:"normal",colors:["#FFF"]},dropShadow:{enabled:!0,right:2,top:2,opacity:.8}},xaxis:{title:{text:"libraries",offsetX:0,offsetY:0,style:{fontSize:"16px",fontFamily:"Helvetica, Arial, sans-serif",fontWeight:600,cssClass:"apexcharts-xaxis-title"}}},yaxis:{title:{text:"Time (milliseconds)",offsetX:0,offsetY:0,style:{fontSize:"16px",fontFamily:"Helvetica, Arial, sans-serif",fontWeight:600,cssClass:"apexcharts-xaxis-title"}},labels:{formatter:function(e){return Number.parseFloat(e).toFixed(0)+" ms"}}},legend:{position:"right",horizontalAlign:"left",offsetY:40,showForSingleSeries:!0},fill:{opacity:1}}},seriesSpeed(){return[{name:"Processing time",data:[{x:"EasyFHE",y:this.code.stats.easyFHE.speed},{x:"node-SEAL",y:this.code.stats.seal.speed}]}]},chartOptionsMemory(){return{stroke:{colors:["transparent"],width:10},chart:{animations:{enabled:!0,easing:"easeinout",speed:800,animateGradually:{enabled:!0,delay:250},dynamicAnimation:{enabled:!0,speed:450}},title:{text:"libraries",offsetX:0,offsetY:0,style:{fontSize:"16px",fontFamily:"Helvetica, Arial, sans-serif",fontWeight:600,cssClass:"apexcharts-xaxis-title"}},type:"bar",height:250,stacked:!1,toolbar:{show:!0},zoom:{enabled:!0}},responsive:[{breakpoint:480,options:{legend:{position:"bottom",offsetX:-10,offsetY:0}}}],plotOptions:{bar:{horizontal:!1,borderRadius:2,distributed:!0,dataLabels:{position:"center"}}},colors:[mt,gt],dataLabels:{enabled:!1,formatter:function(e){return Number.parseFloat(e).toFixed(0)+" bytes"},style:{fontSize:"0.7vw",whiteSpace:"normal",colors:["#FFF"]},dropShadow:{enabled:!0,right:2,top:2,opacity:.8}},xaxis:{title:{text:"libraries",offsetX:0,offsetY:0,style:{fontSize:"16px",fontFamily:"Helvetica, Arial, sans-serif",fontWeight:600,cssClass:"apexcharts-xaxis-title"}}},yaxis:{title:{text:"Size (kilobytes)",offsetX:0,offsetY:0,style:{fontSize:"16px",fontFamily:"Helvetica, Arial, sans-serif",fontWeight:600,cssClass:"apexcharts-xaxis-title"}},labels:{formatter:function(e){return Number.parseFloat(e).toFixed(0)+" bytes"}}},legend:{position:"right",horizontalAlign:"left",offsetY:40,showForSingleSeries:!0},fill:{opacity:1}}},seriesMemory(){return[{name:"Used memory",data:[{x:"EasyFHE",y:this.code.stats.easyFHE.memory},{x:"node-SEAL",y:this.code.stats.seal.memory}]}]},thumbStyle(){return{right:"4px",borderRadius:"7px",backgroundColor:"#727272",width:"4px",opacity:"0.75"}},barStyle(){return{right:"2px",borderRadius:"9px",backgroundColor:"#bdbdbd",width:"8px",opacity:"0.2"}}},methods:{scroll(e,t){if(this.ignoreSource===e)return void(this.ignoreSource="");this.ignoreSource="first"===e?"second":"first";const a="first"===e?this.secondRef:this.firstRef;a.setScrollPosition("vertical",t)},onScrollFirst({verticalPosition:e}){this.scroll("first",e)},onScrollSecond({verticalPosition:e}){this.scroll("second",e)},toggleFullscreen(){this.isFullScreen=!this.isFullScreen},openGraphs(){this.openGraphsDialog=!0}}});var Vt=a(6663);const xt=(0,h.Z)(vt,[["render",Ge]]),St=xt;C()(vt,"components",{QDialog:y.Z,QCard:$.Z,QBar:nt.Z,QSpace:ct.Z,QBtn:R.Z,QTooltip:ut.Z,QCardSection:f.Z,QSeparator:g.Z,QScrollArea:Vt.Z}),C()(vt,"directives",{ClosePopup:ht.Z});var Pt=function(e,t,a,r){function s(e){return e instanceof a?e:new a((function(t){t(e)}))}return new(a||(a=Promise))((function(a,l){function o(e){try{n(r.next(e))}catch(t){l(t)}}function i(e){try{n(r["throw"](e))}catch(t){l(t)}}function n(e){e.done?a(e.value):s(e.value).then(o,i)}n((r=r.apply(e,t||[])).next())}))};const bt=(0,r.aZ)({name:"SchemeBuilder",components:{OperationBuilder:ge,CodeComparison:St},emits:["addOperation","removeScheme"],props:{scheme:{type:Object,required:!0}},setup(){const e=(0,l.C)(),{homomorphicSchemes:t,openCodeComparisonDialog:a,setupSpeedMap:r}=(0,o.Jk)(e);return{openCodeComparisonDialog:a,EasyScheme:p.Px,homomorphicSchemes:t,loadingModule:(0,u.iH)(!1),easyFHE:(0,u.iH)(null),publicKey:(0,u.iH)(null),secretKey:(0,u.iH)(null),isDisabledCompareCode:(0,u.iH)(!1),setupSpeedMap:r}},methods:{compareCode(){this.openCodeComparisonDialog=!0},updateOperationFromCurrentScheme(e,t){const a=e.operations.findIndex((e=>"updateOperation"==e.operator));e.operations[a]=t,this.isDisabledCompareCode=!0},removeScheme(){this.$emit("removeScheme",this.scheme),this.publicKey.delete(),this.secretKey.delete(),this.easyFHE.deallocateLibrary()},addOperation(){this.$emit("addOperation",{leftHandSide:999,rightHandSide:9999,operator:"updateOperation"})},setupSpeedBenchmark(e,t){const a=this.scheme.scheme.value,r=this.scheme.security.value,s=this.scheme.speed.value,l=this.scheme.precision.value;this.setupSpeedMap.easyFhe[`${a}`][r][s][l]=t-e,this.setupSpeedMap.nodeSeal[`${a}`][r][s][l]=t-e}},mounted(){return Pt(this,void 0,void 0,(function*(){this.loadingModule=!0;const e=Date.now();this.easyFHE=yield(0,p.ZP)(),yield this.easyFHE.Setup.initialize(),this.loadingModule=!1,this.easyFHE.Setup.fastSetup(this.scheme.scheme.value,this.scheme.security.value,this.scheme.speed.value,this.scheme.precision.value);const[t,a]=this.easyFHE.generateKeys();this.publicKey=(0,u.Xl)(t),this.secretKey=(0,u.Xl)(a);const r=Date.now();this.setupSpeedBenchmark(e,r)}))},beforeUnmount(){this.publicKey.delete(),this.secretKey.delete(),this.easyFHE.deallocateLibrary()}});var Rt=a(3246);const Et=(0,h.Z)(bt,[["render",W],["__scopeId","data-v-19018b02"]]),Ct=Et;C()(bt,"components",{QCard:$.Z,QCardSection:f.Z,QList:Rt.Z,QItem:V.Z,QItemSection:x.Z,QIcon:S.Z,QSeparator:g.Z,QCardActions:b.Z,QBtn:R.Z,QInnerLoading:ye.Z,QSpinnerGears:$e.Z});const Lt=(0,r.aZ)({name:"Playground",components:{AddScheme:F,SchemeBuilder:Ct},setup(){const e=(0,l.C)(),{homomorphicSchemes:t,openDialog:a,leftDrawerOpen:r}=(0,o.Jk)(e);return{homomorphicSchemes:t,openDialog:a,leftDrawerOpen:r}},methods:{removeSchemeFromPlayground(e){this.homomorphicSchemes=this.homomorphicSchemes.filter((t=>t.schemeID!=e.schemeID))},addOperationToScheme(e,t){e.operations.push(t)},openAddDialog(){this.openDialog=!0}},mounted(){this.leftDrawerOpen=!1},unmounted(){this.homomorphicSchemes=[]}});var Ft=a(9885),wt=a(627);const Ht=(0,h.Z)(Lt,[["render",s],["__scopeId","data-v-6533e462"]]),It=Ht;C()(Lt,"components",{QPage:Ft.Z,QPageSticky:wt.Z,QBtn:R.Z})}}]);